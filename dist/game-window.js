window.stars=function(t){var e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}return s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(r,i,function(e){return t[e]}.bind(null,i));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=2)}([function(t,e){!function(t,e){for(var s in e)t[s]=e[s]}(e,function(t){var e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}return s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(r,i,function(e){return t[e]}.bind(null,i));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);class r{constructor(t=0,e=0){this.x=t,this.y=e}set({x:t,y:e}){return this.x=t||0,this.y=e||0,this}clear(){this.x=0,this.y=0}fix(){return!!this.check()||(this.x=Number(this.x),this.y=Number(this.y),!!this.check()||(this.x=0,this.y=0,!1))}add({x:t,y:e}){return this.x+=t||0,this.y+=e||0,this}subtract({x:t,y:e}){return this.x-=t||0,this.y-=e||0,this}multiply(t){return this.x*=t||1,this.y*=t||1,this}abs(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}reverse(){return this.multiply(-1)}normalize(){const t=this.getMagnitude();return 0===t?(this.x=0,this.y=0,this):(this.x=this.x/t,this.y=this.y/t,this)}setMagnitude(t){return this.normalize().multiply(t)}setTangent(){return this.set(this.y,this.x)}getDistance({x:t,y:e}){return Math.sqrt(Math.pow(this.x-t,2)+Math.pow(this.y-e,2))}getAbsoluteDistance(t={}){return Math.abs(this.getDistance(t))}getMagnitude(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}clone(){return new r(this.x,this.y)}getMultiply(t){return new r(this.x*t,this.y*t)}getDot({x:t,y:e}){return this.x*t+this.y*e}getUnitVector(t={}){const e=this.getAbsoluteDistance(t);if(0===e)return new r(0,0);const s=t.x-this.x,i=t.y-this.y;return new r(s/e,i/e)}getUnitVectorTangent(t={}){const e=this.getAbsoluteDistance(t);if(0===e)return new r(0,0);const s=(t.y-this.y)/e,i=(this.x-t.x)/e;return new r(s,i)}getPerpendicularVector(t=!1){return t?new r(-1*this.y,this.x):new r(this.y,-1*this.x)}getTangent(){return new r(this.y,this.x)}check(){return"number"==typeof this.x&&"number"==typeof this.y&&!isNaN(this.x)&&!isNaN(this.y)}isEqual({x:t,y:e}){return this.x===t&&this.y===e}isEqualInteger({x:t,y:e}){return Math.round(this.x)===Math.round(t)&&Math.round(this.y)===Math.round(e)}setByPolarCoords(t,e){return this.set({x:t*Math.cos(e),y:t*Math.sin(e)})}rotate(t,e){return this.subtract(e),this.setByPolarCoords(this.r,this.theta+t),this.add(e),this}getRadius(){return this.getDistance({x:0,y:0})}setRadius(t){return this.setByPolarCoords(t,this.getTheta()),this}getTheta(){return Math.atan2(this.y,this.x)}setTheta(t){this.setByPolarCoords(this.getRadius(),t)}getDegrees(){return this.getTheta()*(180/Math.PI)}equals(t={}){return this.isEqual(t)}copy(){return this.clone()}getCopy(){return this.clone()}getClone(){return this.clone()}}var i=r;e.default={Coords:i}}]).default)},function(t,e){!function(t,e){for(var s in e)t[s]=e[s]}(e,function(t){var e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}return s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(r,i,function(e){return t[e]}.bind(null,i));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);class r{constructor(t=0,e=0){this.x=t,this.y=e}set({x:t,y:e}){return this.x=t||0,this.y=e||0,this}clear(){this.x=0,this.y=0}fix(){return!!this.check()||(this.x=Number(this.x),this.y=Number(this.y),!!this.check()||(this.x=0,this.y=0,!1))}add({x:t,y:e}){return this.x+=t||0,this.y+=e||0,this}subtract({x:t,y:e}){return this.x-=t||0,this.y-=e||0,this}multiply(t){return this.x*=t||1,this.y*=t||1,this}abs(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}reverse(){return this.multiply(-1)}normalize(){const t=this.getMagnitude();return 0===t?(this.x=0,this.y=0,this):(this.x=this.x/t,this.y=this.y/t,this)}setMagnitude(t){return this.normalize().multiply(t)}setTangent(){return this.set(this.y,this.x)}getDistance({x:t,y:e}){return Math.sqrt(Math.pow(this.x-t,2)+Math.pow(this.y-e,2))}getAbsoluteDistance(t={}){return Math.abs(this.getDistance(t))}getMagnitude(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}clone(){return new r(this.x,this.y)}getMultiply(t){return new r(this.x*t,this.y*t)}getDot({x:t,y:e}){return this.x*t+this.y*e}getUnitVector(t={}){const e=this.getAbsoluteDistance(t);if(0===e)return new r(0,0);const s=t.x-this.x,i=t.y-this.y;return new r(s/e,i/e)}getUnitVectorTangent(t={}){const e=this.getAbsoluteDistance(t);if(0===e)return new r(0,0);const s=(t.y-this.y)/e,i=(this.x-t.x)/e;return new r(s,i)}getPerpendicularVector(t=!1){return t?new r(-1*this.y,this.x):new r(this.y,-1*this.x)}getTangent(){return new r(this.y,this.x)}check(){return"number"==typeof this.x&&"number"==typeof this.y&&!isNaN(this.x)&&!isNaN(this.y)}isEqual({x:t,y:e}){return this.x===t&&this.y===e}isEqualInteger({x:t,y:e}){return Math.round(this.x)===Math.round(t)&&Math.round(this.y)===Math.round(e)}setByPolarCoords(t,e){return this.set({x:t*Math.cos(e),y:t*Math.sin(e)})}rotate(t,e){return this.subtract(e),this.setByPolarCoords(this.r,this.theta+t),this.add(e),this}getRadius(){return this.getDistance({x:0,y:0})}setRadius(t){return this.setByPolarCoords(t,this.getTheta()),this}getTheta(){return Math.atan2(this.y,this.x)}setTheta(t){this.setByPolarCoords(this.getRadius(),t)}getDegrees(){return this.getTheta()*(180/Math.PI)}equals(t={}){return this.isEqual(t)}copy(){return this.clone()}getCopy(){return this.clone()}getClone(){return this.clone()}}var i=r;e.default={Coords:i}}]).default)},function(t,e,s){"use strict";s.r(e);var r=s(0);class i{constructor(t){this.verts=t}static getRegularPolygonVerts(t=3,e=1){const s=[];for(let r=0;r<t;r++)s.push([e*Math.cos(0+r*Math.PI*2/t),e*Math.sin(0+r*Math.PI*2/t),0]);return s}objectInside(t){const{verts:e}=t;for(let t=0;t<e.length;t++)if(i.pointInPolygon(e[t],this.verts))return!0;return!1}static getCenter(t){const e=t.length;return t.reduce((t,s)=>[t[0]+s[0]/e,t[1]+s[1]/e],[0,0])}static getRadius([t,e]){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2))}static getRadii(t){let e=1/0;const s=t.reduce((t,s)=>{const r=i.getRadius(s);return r<e&&(e=r),r>t?r:t},0);return{inner:e,outer:s}}static pointInPolygon(t,e){const s=t[0],r=t[1];let i=!1;for(let t=0,n=e.length-1;t<e.length;n=t++){const o=e[t][0],a=e[t][1],h=e[n][0],u=e[n][1];a>r!=u>r&&s<(h-o)*(r-a)/(u-a)+o&&(i=!i)}return i}static doPolygonsIntersect(t,e){var s,r,i,n,o,a,h,u,c=[t,e];for(n=0;n<c.length;n++){var l=c[n];for(o=0;o<l.length;o++){var d=(o+1)%l.length,g=l[o],y=l[d],p={x:y.y-g.y,y:g.x-y.x};for(s=r=void 0,a=0;a<t.length;a++)i=p.x*t[a].x+p.y*t[a].y,(void 0===s||i<s)&&(s=i),(void 0===r||i>r)&&(r=i);for(h=u=void 0,a=0;a<e.length;a++)i=p.x*e[a].x+p.y*e[a].y,(isUndefined(h)||i<h)&&(h=i),(isUndefined(u)||i>u)&&(u=i);if(r<h||u<s)return!1}}return!0}}var n=i,o=s(1);function a(t,e){t.forEach(s=>{a.isPhysical(s)&&(s.collide&&s.collide(t),s.gravitate&&s.gravitate(e,t),s.move&&s.move(e))})}function h(){return new a.Coords}a.Coords=o.Coords,a.bigG=5,a.collidingVelocityMultiplier=.95,a.collidePushbackMultipler=.2,a.elasticity=.98,a.MIN_GRAVITY_RADIUS=1,a.isPhysical=t=>t.pos instanceof a.Coords&&t.vel instanceof a.Coords,a.getOrbitalVelocity=function(t,e,s=!1,r=a.bigG){const i=e.mass,n=t.pos.getDistance(e.pos),o=Math.sqrt(r*i/n);return t.pos.getUnitVector(e.pos).getPerpendicularVector(s).multiply(o)},a.canCollide=t=>({colliding:[],collideDetect(e){const s="number"==typeof t.innerRadius?t.innerRadius:0,r="number"==typeof e.innerRadius?e.innerRadius:0,i=t.pos.getDistance(e.pos)-s-r;return{isColliding:!(i>0),edgeToEdgeDistance:i}},collidePushback(e,s,r=a.collidePushbackMultipler){const i=s*r,n=t.mass>e.mass?t:e,o=n===t?e:t,h=o.pos.getUnitVector(n.pos).multiply(i);o.pos.add(h)},collideBounce(t,e=a.elasticity){var s=this;if(s.mass<=0||t.mass<=0)return!1;s.mass,s.vel.getMagnitude(),t.mass,t.vel.getMagnitude();var r=s.pos.getUnitVector(t.pos),i=2*(s.vel.getDot(r)-t.vel.getDot(r))/(s.mass+t.mass);return s.vel.add(r.getMultiply(-1*i*t.mass)),s.vel.multiply(e),t.vel.add(r.getMultiply(i*s.mass)),s.vel.multiply(e),!0},collideDamage(e){if(!t.damage)return;const s=t.vel.clone().add(e.vel).getMagnitude(),r=s<1?0:Math.ceil(Math.pow(s,1.4)/10);r&&t.damage(r,e)},collide(e){t.isColliding=!1,t.colliding.length=0,e.forEach(e=>{if(t===e||!a.isPhysical(e))return!1;const{isColliding:s,edgeToEdgeDistance:r}=t.collideDetect(e);return!!s&&(t.colliding.push(e),t.collidePushback(e,r),t.collideBounce(e),t.collideDamage(e),!0)}),t.isColliding=t.colliding.length>0,t.isColliding&&t.vel.multiply(a.collidingVelocityMultiplier)}}),a.canMove=t=>({lastPos:h(),pos:h(),force:h(),acc:h(),vel:h(),move(e){if(t.lastPos.set(t.pos),0!==t.mass){const e=new a.Coords(t.force.x/t.mass,t.force.y/t.mass);t.acc.add(e)}const s=t.acc.getMultiply(e);t.vel.add(s);const r=t.vel.getMultiply(e/2);t.pos.add(r),t.force.clear(),t.acc.clear()}}),a.canGravitate=(t,e=a.bigG)=>({gravitate(s,r){if(0===t.mass)return!1;const i=e*t.mass;r.forEach(e=>t.gravitateOne(e,i))},gravitateOne(e,s){if(e===t||0===e.mass||0===t.mass||t.isColliding||!t.gravitate||!a.isPhysical(e))return!1;const r=t.pos.getDistance(e.pos);if(r<a.MIN_GRAVITY_RADIUS)return!1;const i=t.pos.getUnitVector(e.pos),n=Math.pow(r,2),o=0==n?0:s*e.mass/n,h=i.getMultiply(o);return t.force.add(h),!0}}),a.canRotate=t=>({rotation:0,rotVel:0,torque:0,momentOfInertia:0,inverseMomentOfInertia:0,rotate(e){t.rotation+=t.rotVel*e}}),a.physical=(t,{mass:e=1,bigG:s=a.bigG})=>(Object.assign(t,{mass:e},a.canCollide(t),a.canMove(t),a.canGravitate(t,s),a.canRotate(t)),t);var u=a;u.Coords=r.Coords,u.bigG=1e-6;var c=class extends n{constructor(t=[]){super([]);const e=()=>.2*Math.random()+.4,s=this;Object.assign(s,{baseVerts:t,baseColor:[e(),e(),e()],hitColor:[.7,0,0],boundingBox:[],hit:!1,verts:[],vc:null,r:0,innerRadius:0,children:[]}),u.physical(s,{mass:10}),s.alignToCenter(),s.calcRadii(),s.calcVerts(),s.calcMass()}alignToCenter(){const t=n.getCenter(this.baseVerts);this.baseVerts.forEach(e=>{[0,1].forEach(s=>e[s]=e[s]-t[s])})}calcRadii(){let t=1/0;this.r=this.baseVerts.reduce((e,s)=>{const r=s.r=n.getRadius(s);return r<t&&(t=r),r>e?r:e},0),this.innerRadius=t}calcMass(){this.mass=Math.PI*Math.pow((this.innerRadius+this.r)/2,2)*50}getVertColors(){return this.vc}getColor(){const t=this.baseColor;return[t[0]+(this.hit?.1:0),t[1]+(this.isColliding?.1:0),t[2]]}calcVerts(){let t=[];this.verts.length=0,this.baseVerts.forEach((e,s)=>{this.verts[s]=[e[0]+this.pos.x,e[1]+this.pos.y,0],t=t.concat(this.verts[s]).concat(this.getColor())}),this.vc=new Float32Array(t)}calcVertWithRotation(t,e,s){const r=Math.cos(this.rotation),i=Math.sin(this.rotation);return this.verts[s]=[r*e[0]-i*e[1]+this.pos.x,r*e[1]+i*e[0]+this.pos.y,0],t.concat(this.verts[s]).concat(this.getColor())}calcVertsWithRotation(){this.verts.length=0;let t=this.baseVerts.reduce((t,e,s)=>this.calcVertWithRotation(t,e,s),[]);this.vc=new Float32Array(t)}static rotate(t,e,s){let r=t[0]-s[0];r+=s[0]}clearHit(){return this.hit=!1,this}checkHits(t){t.forEach(t=>this.checkHit(t))}checkHit(t){t!==this&&this.objectInside(t)&&(this.hit=!0)}setOrbitalVelocity(t){this.vel.set(u.getOrbitalVelocity(this,t))}};const l=[[.2,-.1,0],[.35,0,0],[.45,.1,0],[.4,.3,0],[.3,.4,0],[.2,.8,0],[.1,.4,0],[0,.3,0],[-.05,.1,0],[.05,0,0]];var d=class extends c{constructor(){super(l.map(t=>t.map(t=>1.5*t))),Object.assign(this,{shipScale:1.5,engaged:!1,facingRotationOffset:-Math.PI/2,thrustPowerUpMax:2,thrustPowerUpStart:.75,thrustPowerUp:.75,thrustPowerUpMultiplier:.5,thrustPowerDownMultiplier:2}),this.mass*=3,this.thrustMagnitude=100*this.mass}setRotation(t){this.rotation=t+this.facingRotationOffset}getFacingUnitVector(){const t=this.rotation+this.facingRotationOffset,e=Math.cos(t),s=Math.sin(t);return new r.Coords(e,s)}ongoing(t){this.engaged?this.thrust(t):this.cooldownThrust(t)}engage(){this.engaged=!0,this.thrust(.02)}disengage(){this.engaged=!1}thrust(t){this.thrustPowerUp;this.thrustPowerUp+=t*this.thrustPowerUpMultiplier,this.thrustPowerUp=Math.min(this.thrustPowerUpMax,this.thrustPowerUp);const e=this.getFacingUnitVector().getMultiply(t*-this.thrustMagnitude*this.thrustPowerUp);this.force.add(e)}cooldownThrust(t){this.thrustPowerUp<=this.thrustPowerUpStart||(this.thrustPowerUp-=t*this.thrustPowerDownMultiplier,this.thrustPowerUp=Math.max(this.thrustPowerUpStart,this.thrustPowerUp))}fire(){return 22+2*Math.random()}};var g=class extends c{constructor(){super(c.getRegularPolygonVerts(3+Math.floor(7*Math.random()),1.5+.5*Math.random()-.5*Math.random()))}};const y=new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),p=(...t)=>console.log(...t);class f{constructor(t,e){Object.assign(this,{gl:t,p:e,i:0,aV:e.map(()=>({})),uV:e.map(()=>({}))})}use(t){return this.i=t,this.gl.useProgram(this.p[t]),this}v(t,e,s,r,i){const n=this,o=n[t][n.i][r]||n.gl[e](n.p[n.i],r);return n.gl[`${s}${i.length}f`](o,...i),n[t][this.i][r]=o}attr(t,...e){return this.v("aV","getAttribLocation","vertexAttrib",t,e)}unif(t,...e){return this.v("uV","getUniformLocation","uniform",t,e)}ua(t){t.forEach(t=>this.unif(...t))}buff(t,e,{size:s=2,type:r=this.gl.FLOAT,norm:i=!1,stride:n=0,offset:o=0}={}){const{gl:a,p:h}=this;a.bindBuffer(a.ARRAY_BUFFER,a.createBuffer()),a.bufferData(a.ARRAY_BUFFER,e,a.STATIC_DRAW);const u=e.BYTES_PER_ELEMENT,c=a.getAttribLocation(h[this.i],t);return a.vertexAttribPointer(c,s,r,i,n*u,o*u),a.enableVertexAttribArray(c),c}ba(t,e){e.forEach(e=>this.buff(e[0],t,e[1]))}clear(){this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT)}draw({uniforms:t=[],i:e=this.i,buffs:s=[],verts:r=y,vertSize:i=2,vertsToDraw:n,type:o=this.gl.TRIANGLES,clear:a=!0}){const h=this;return h.use(e),h.ua(t),h.ba(r,s),a&&h.clear(),void 0===n&&(n=r.length/i),h.gl.drawArrays(o,0,n),h}drawAll(t={}){this.p.forEach((e,s)=>this.draw(Object.assign({i:s,clear:!s},t)))}}const m={Glp:f,STV:y,STNPV:2,getRenderingContext:(t,e=!1)=>{const s=document.querySelector(t).getContext("webgl",{antialias:e});return s||alert("Unable to initialize WebGL. Your browser or machine may not support it."),s},loadText:t=>fetch(t).then(t=>t.text()),loadShaders:t=>Promise.all(t.map(t=>m.loadText(t))),compileShader:(t,e,s)=>{const r=t.createShader(e);return t.shaderSource(r,s),t.compileShader(r),r},fullscreen:(t,e=window)=>{t.canvas.width=e.innerWidth,t.canvas.height=e.innerHeight,m.setViewport(t)},setViewport:t=>{t.viewport(0,0,t.canvas.width,t.canvas.height)},compile:(t,e)=>{const s=t.createProgram(),r=[t.VERTEX_SHADER,t.FRAGMENT_SHADER],i=["vertex","fragment"];return e.map((e,n)=>{const o=m.compileShader(t,r[n],e);t.attachShader(s,o),p(i[n]+" shader:",t.getShaderInfoLog(o)||"OK")}),t.linkProgram(s),t.useProgram(s),p("program:",t.getProgramInfoLog(s)||"OK"),s},init:async(t,e,{fullscreen:s}={})=>{const r="string"==typeof t?m.getRenderingContext(t):t,i=e.map(t=>m.loadShaders(t).then(t=>m.compile(r,t))),n=await Promise.all(i);return s&&m.fullscreen(r),new f(r,n)}};var x=m;const v=[["stars-v.glsl","stars-f.glsl"],["v.glsl","f.glsl"]];let M,b,w=12,P=404,R=!1;const C=[],V=function(){const t=c.getRegularPolygonVerts(40,40),e=new c(t);return e.pos.set({x:0,y:0}),e.move=()=>{},e.mass*=1e4,C.push(e),e}(),T=(function(t){for(let e=0;e<404;e++){const e=new g;A(e,t),e.damage=(s,r)=>{r===t&&A(e,t)},C.push(e)}}(V),function(t){const e=new d;return e.pos.set({x:120,y:0}),e.baseColor=[.6,1,.3],e.setOrbitalVelocity(t),C.push(e),e}(V)),O=t=>document.getElementById(t),S=()=>{const t=[["iResolution",M.gl.canvas.width,M.gl.canvas.height],["zoom",w],["viewerPosition",T.pos.x,T.pos.y,0]];M.use(0).draw({uniforms:t,buffs:[["position"]]});const e=[["position",{size:3,stride:6}],["color",{size:3,stride:6,offset:3}]];M.use(1).draw({uniforms:t,buffs:e,verts:new Float32Array([]),vertSize:6,type:M.gl.TRIANGLE_FAN,clear:!1}),C.forEach(t=>{M.draw({buffs:e,verts:t.getVertColors(),vertSize:6,type:M.gl.TRIANGLE_FAN,clear:!1})})},E=t=>{let e=0;const s=[];return C.forEach((r,i)=>{r.delete?s.push(i):(r.ongoing&&r.ongoing(t),r.rotate(t),r.calcVertsWithRotation(),r.gravitate&&r.gravitate(t,[C[0]]),r.move(t),r.collide(C),r.clearHit(),r.checkHits(C),r instanceof g&&e++)}),((t=[])=>{for(let e=t.length-1;e>=0;e--){const s=t[e];C.splice(s,1)}})(s),{asteroidCount:e}};function A(t,e){const s=120+30*Math.random(),r=2*Math.PI*Math.random();t.pos.setByPolarCoords(s,r),t.setOrbitalVelocity(e),t.rotVel=.3*Math.random()-.3*Math.random()}const D=(t,e)=>{let s=0;b=()=>{window.requestAnimationFrame(t=>{const{asteroidCount:r}=E((t-s)/1e3);var i;P!==(i=r)&&(e.innerHTML=i,P=i,0===i&&(O("win").style.display="block")),S(),s=t,b()})},E(0),S()};const U=(t,e)=>{const s=[t.width,t.height];window.addEventListener("wheel",t=>{const e=.001*Math.min(600,Math.abs(t.deltaY))*w,s=t.deltaY<0?-1:1;w=Math.max(.4,Math.min(5e3,w+s*e)),R||S()}),window.oncontextmenu=t=>t.preventDefault(),t.onmousedown=t.ontouchstart=t=>{3===t.which&&e.engage()},t.onmouseup=t.ontouchend=t=>{if(R||(R=!0,O("main").classList.add("go"),b()),3===t.which)return void e.disengage();const s=e.fire();((t,e)=>{const s=new c([[0,.2,0],[-.1,-.1,0],[0,-.2,0],[.1,-.1,0]]);s.rotation=t.rotation;const r=t.getFacingUnitVector().multiply(-1);s.pos.set(t.pos).add(r.getMultiply(t.shipScale)),s.vel.set(t.vel).add(r.getMultiply(e)),s.mass*=.5,function(t,e=8){t.decayTime=e,t.ongoing=e=>{t.decayTime-=e,t.decayTime<0&&(t.delete=!0)}}(s,8),s.damage=(t,e)=>{s.decayTime*=.5,e!==V&&(e.delete=!0)},s.gravitate=null,C.push(s)})(e,s)},t.onmousemove=t.ontouchmove=t=>{const r=(t=>{const e=t.type.startsWith("touch")?t.targetTouches[0]:t;return[e.pageX,e.pageY]})(t).map((t,e)=>(t-s[e]/2)*(1===e?-1:1)),i=Math.atan2(r[1],r[0]);e.rotation=i-Math.PI/2}};document.addEventListener("DOMContentLoaded",async()=>(M=await x.init("#canvas",v,{fullscreen:!0}),window.z.glp=M,console.log(M),U(M.gl.canvas,T),D(0,O("count")),M)),window.z={SpaceObject:c,glp:M,objects:C}}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFycy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zdGFycy8uL25vZGVfbW9kdWxlcy9yb2NrZXQtYm9vdHMtY29vcmRzL2luZGV4LmNqcyIsIndlYnBhY2s6Ly9zdGFycy9BOi93ZWIvZGVhdGhyYXlnYW1lcy5jb20vcm9ja2V0LWJvb3RzLXJlcG9zL3BoeXNpY3Mvbm9kZV9tb2R1bGVzL3JvY2tldC1ib290cy1jb29yZHMvaW5kZXguY2pzIiwid2VicGFjazovL3N0YXJzLy4vc3JjL1BvbHlnb24uanMiLCJ3ZWJwYWNrOi8vc3RhcnMvQTovd2ViL2RlYXRocmF5Z2FtZXMuY29tL3JvY2tldC1ib290cy1yZXBvcy9waHlzaWNzL3NyYy9waHlzaWNzLmpzIiwid2VicGFjazovL3N0YXJzLy4vc3JjL1NwYWNlT2JqZWN0LmpzIiwid2VicGFjazovL3N0YXJzLy4vc3JjL1NoaXAuanMiLCJ3ZWJwYWNrOi8vc3RhcnMvLi9zcmMvQXN0ZXJvaWQuanMiLCJ3ZWJwYWNrOi8vc3RhcnMvQTovd2ViL2RlYXRocmF5Z2FtZXMuY29tL3JvY2tldC1ib290cy1yZXBvcy93ZWJnbHAvd2ViZ2xwLmpzIiwid2VicGFjazovL3N0YXJzLy4vc3JjL2dhbWUuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJlIiwiYSIsIl9fd2VicGFja19tb2R1bGVfXyIsIl9fd2VicGFja19leHBvcnRzX18iLCJDb29yZHMiLCJ4IiwieSIsInRoaXMiLCJjaGVjayIsIk51bWJlciIsIk1hdGgiLCJhYnMiLCJyb3VuZCIsIm11bHRpcGx5IiwidmVjdG9yTGVuZ3RoIiwiZ2V0TWFnbml0dWRlIiwibm9ybWFsaXplIiwic2V0Iiwic3FydCIsInBvdyIsImNvb3JkcyIsImdldERpc3RhbmNlIiwiZ2V0QWJzb2x1dGVEaXN0YW5jZSIsImR4IiwiZHkiLCJsZWZ0IiwiaXNOYU4iLCJ0aGV0YSIsImNvcyIsInNpbiIsImRlbHRhVGhldGEiLCJhcm91bmRPcmlnaW5Db29yZHMiLCJzdWJ0cmFjdCIsInNldEJ5UG9sYXJDb29yZHMiLCJhZGQiLCJnZXRUaGV0YSIsImF0YW4yIiwiZ2V0UmFkaXVzIiwiUEkiLCJpc0VxdWFsIiwiY2xvbmUiLCJzcmNfQ29vcmRzIiwiUG9seWdvbiIsInZlcnRzIiwicHVzaCIsIm9iaiIsImxlbmd0aCIsInBvaW50SW5Qb2x5Z29uIiwidmwiLCJyZWR1Y2UiLCJ2ZXJ0U3VtIiwiYnYiLCJpbm5lciIsIkluZmluaXR5Iiwib3V0ZXIiLCJwb2ludCIsInZzIiwiaW5zaWRlIiwiaiIsInhpIiwieWkiLCJ4aiIsInlqIiwiYiIsIm1pbkEiLCJtYXhBIiwicHJvamVjdGVkIiwiaTEiLCJtaW5CIiwibWF4QiIsInBvbHlnb25zIiwicG9seWdvbiIsImkyIiwicDEiLCJwMiIsIm5vcm1hbCIsInVuZGVmaW5lZCIsImlzVW5kZWZpbmVkIiwicGh5c2ljcyIsIm9iamVjdHMiLCJmb3JFYWNoIiwiaXNQaHlzaWNhbCIsImNvbGxpZGUiLCJncmF2aXRhdGUiLCJtb3ZlIiwibmV3WHkiLCJiaWdHIiwiY29sbGlkaW5nVmVsb2NpdHlNdWx0aXBsaWVyIiwiY29sbGlkZVB1c2hiYWNrTXVsdGlwbGVyIiwiZWxhc3RpY2l0eSIsIk1JTl9HUkFWSVRZX1JBRElVUyIsInBvcyIsInZlbCIsImdldE9yYml0YWxWZWxvY2l0eSIsInNtYWxsT2JqZWN0IiwiYmlnT2JqZWN0IiwiTSIsIm1hc3MiLCJzcGVlZCIsImdldFVuaXRWZWN0b3IiLCJnZXRQZXJwZW5kaWN1bGFyVmVjdG9yIiwiY2FuQ29sbGlkZSIsImNvbGxpZGluZyIsImlubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXNCIiwiZWRnZVRvRWRnZURpc3RhbmNlIiwiaXNDb2xsaWRpbmciLCJwdXNoTXVsdGlwbGllciIsInB1c2hBbW91bnQiLCJwdXNoZXIiLCJwdXNoZWUiLCJvMiIsIm8xIiwib3B0aW1pemVkUCIsImdldERvdCIsImdldE11bHRpcGx5IiwiZGFtYWdlIiwidmVsb2NpdHlNYWciLCJ2ZWxvY2l0eURhbWFnZSIsImNlaWwiLCJvYmpzIiwiY29sbGlkZURldGVjdCIsImNvbGxpZGVQdXNoYmFjayIsImNvbGxpZGVCb3VuY2UiLCJjb2xsaWRlRGFtYWdlIiwiY2FuTW92ZSIsImxhc3RQb3MiLCJmb3JjZSIsImFjYyIsImZvcmNlQWNjIiwiZGVsdGFWZWwiLCJkZWx0YVBvcyIsImNsZWFyIiwiY2FuR3Jhdml0YXRlIiwiYmlnR01hc3MiLCJncmF2aXRhdGVPbmUiLCJ1bml0IiwiclNxdWFyZWQiLCJmb3JjZU1hZ25pdHVkZSIsImZvcmNlT2ZHcmF2aXR5IiwiY2FuUm90YXRlIiwicm90YXRpb24iLCJyb3RWZWwiLCJ0b3JxdWUiLCJtb21lbnRPZkluZXJ0aWEiLCJpbnZlcnNlTW9tZW50T2ZJbmVydGlhIiwicGh5c2ljYWwiLCJhc3NpZ24iLCJiYXNlVmVydHMiLCJzdXBlciIsInJhbmRvbSIsImJhc2VDb2xvciIsImhpdENvbG9yIiwiYm91bmRpbmdCb3giLCJoaXQiLCJ2YyIsImNoaWxkcmVuIiwiYWxpZ25Ub0NlbnRlciIsImNhbGNSYWRpaSIsImNhbGNWZXJ0cyIsImNhbGNNYXNzIiwiY2VudGVyIiwiZ2V0Q2VudGVyIiwidiIsImJjIiwiY29uY2F0IiwiZ2V0Q29sb3IiLCJGbG9hdDMyQXJyYXkiLCJjYWxjVmVydFdpdGhSb3RhdGlvbiIsInh5IiwicmFkaWFucyIsImNoZWNrSGl0Iiwib2JqZWN0SW5zaWRlIiwiYmlnT2JqIiwiU0hJUF9CQVNFX1ZFUlRTIiwibWFwIiwiY29vcmQiLCJzaGlwU2NhbGUiLCJlbmdhZ2VkIiwiZmFjaW5nUm90YXRpb25PZmZzZXQiLCJ0aHJ1c3RQb3dlclVwTWF4IiwidGhydXN0UG93ZXJVcFN0YXJ0IiwidGhydXN0UG93ZXJVcCIsInRocnVzdFBvd2VyVXBNdWx0aXBsaWVyIiwidGhydXN0UG93ZXJEb3duTXVsdGlwbGllciIsInRocnVzdE1hZ25pdHVkZSIsInJvdCIsInRocnVzdCIsImNvb2xkb3duVGhydXN0IiwibWluIiwidGhydXN0Rm9yY2UiLCJnZXRGYWNpbmdVbml0VmVjdG9yIiwibWF4IiwiZ2V0UmVndWxhclBvbHlnb25WZXJ0cyIsImZsb29yIiwiU1RWIiwibG9nIiwiYXJncyIsImNvbnNvbGUiLCJHbHAiLCJnbCIsImFWIiwidVYiLCJ1c2VQcm9ncmFtIiwiZyIsImYiLCJ1IiwidW5pZiIsImF0dHIiLCJkYXRhIiwic2l6ZSIsInR5cGUiLCJGTE9BVCIsIm5vcm0iLCJzdHJpZGUiLCJvZmZzZXQiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiY3JlYXRlQnVmZmVyIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwic3oiLCJCWVRFU19QRVJfRUxFTUVOVCIsImlkIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJidWZmIiwiY2xlYXJDb2xvciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJ1bmlmb3JtcyIsImJ1ZmZzIiwidmVydFNpemUiLCJ2ZXJ0c1RvRHJhdyIsIlRSSUFOR0xFUyIsInVzZSIsInVhIiwiYmEiLCJkcmF3QXJyYXlzIiwib3B0IiwiZHJhdyIsIndlYmdscCIsIlNUTlBWIiwiZ2V0UmVuZGVyaW5nQ29udGV4dCIsInNlbGVjdG9yIiwiYW50aWFsaWFzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0Q29udGV4dCIsImFsZXJ0IiwibG9hZFRleHQiLCJ1cmwiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsInRleHQiLCJsb2FkU2hhZGVycyIsInVybHMiLCJQcm9taXNlIiwiYWxsIiwiY29tcGlsZVNoYWRlciIsInNyYyIsInNoYWRlciIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImZ1bGxzY3JlZW4iLCJ3aW4iLCJ3aW5kb3ciLCJjYW52YXMiLCJ3aWR0aCIsImlubmVyV2lkdGgiLCJoZWlnaHQiLCJpbm5lckhlaWdodCIsInNldFZpZXdwb3J0Iiwidmlld3BvcnQiLCJjb21waWxlIiwic2hhZGVycyIsInByb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwiUyIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVF9TSEFERVIiLCJMIiwiYXR0YWNoU2hhZGVyIiwiZ2V0U2hhZGVySW5mb0xvZyIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJpbml0IiwiYXN5bmMiLCJ1cmxzQXJyIiwicHJvbWlzZXMiLCJwcm9ncmFtcyIsIlNIQURFUlMiLCJnbHAiLCJsb29wIiwiem9vbSIsImxhc3RBc3Rlcm9pZENvdW50IiwiaXNTdGFydGVkIiwic3VuIiwic2V0dXBTdW4iLCJwdXRJblJhbmRvbU9yYml0IiwiZG1nIiwib2JqSGl0Iiwic2V0dXBBc3Rlcm9pZHMiLCJzaGlwIiwic2V0T3JiaXRhbFZlbG9jaXR5Iiwic2V0dXBTaGlwIiwiJCIsImdldEVsZW1lbnRCeUlkIiwiVFJJQU5HTEVfRkFOIiwiZ2V0VmVydENvbG9ycyIsIm9iamVjdExvb3AiLCJhc3Rlcm9pZENvdW50IiwiZGVsZXRlSW5kaWNlcyIsImRlbGV0ZSIsIm9uZ29pbmciLCJyb3RhdGUiLCJjYWxjVmVydHNXaXRoUm90YXRpb24iLCJjbGVhckhpdCIsImNoZWNrSGl0cyIsInNwbGljZSIsInJlbW92ZURlbGV0ZWRPYmplY3RzIiwic2V0dXBMb29wIiwiY291bnRFbHQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJub3ciLCJpbm5lckhUTUwiLCJzdHlsZSIsImRpc3BsYXkiLCJzZXR1cElucHV0IiwiY2FudmFzU2l6ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ6b29tU3BlZWQiLCJkZWx0YVkiLCJ6b29tRGlyIiwib25jb250ZXh0bWVudSIsInByZXZlbnREZWZhdWx0Iiwib25tb3VzZWRvd24iLCJvbnRvdWNoc3RhcnQiLCJ3aGljaCIsImVuZ2FnZSIsIm9ubW91c2V1cCIsIm9udG91Y2hlbmQiLCJjbGFzc0xpc3QiLCJkaXNlbmdhZ2UiLCJidWxsZXRQb3dlciIsImZpcmUiLCJmYWNpbmciLCJkZWNheVRpbWUiLCJtYWtlRGVjYXkiLCJtYWtlQnVsbGV0Iiwib25tb3VzZW1vdmUiLCJvbnRvdWNobW92ZSIsImZpeGVkQ3VycmVudE1vdXNlUG9zIiwiZUZpeGVkIiwic3RhcnRzV2l0aCIsInRhcmdldFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiZ2V0TW91c2VQb3NpdGlvbiIsInoiLCJTcGFjZU9iamVjdCJdLCJtYXBwaW5ncyI6InlCQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQTBEZixPQXJEQUYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFB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QUFPWSxRQUFTLElBR2xCM1AsRUFBRW9CLFVBQVksS0FDZEosRUFBUW5DLEtBQUttQixJQW1JWitSLENBQVc5QyxFQUFNeUMsSUFFbEI3RSxFQUFPbUYsWUFBY25GLEVBQU9vRixZQUFlaFcsSUFDMUMsTUFBTWlXLEVBL0JpQixDQUFDalcsSUFFekIsTUFBTWtXLEVBQVVsVyxFQUFFbU4sS0FBS2dKLFdBQVcsU0FBWW5XLEVBQUVvVyxjQUFjLEdBQUtwVyxFQUNuRSxNQUFPLENBQUNrVyxFQUFPRyxNQUFPSCxFQUFPSSxRQTRCQ0MsQ0FBaUJ2VyxHQUFHK0ssSUFBSSxDQUFDdEwsRUFBR3pCLEtBQ3ZEeUIsRUFBS2lWLEVBQVcxVyxHQUFLLElBQWEsSUFBTkEsR0FBVyxFQUFJLElBRXZDMkQsRUFBUWpCLEtBQUswQixNQUFNNlQsRUFBcUIsR0FBSUEsRUFBcUIsSUFDdkVqRCxFQUFLbkssU0FBV2xILEVBQVFqQixLQUFLNEIsR0FBRyxJQWVsQ2dOLFNBQVNxRixpQkFBaUIsbUJBVGIzQyxVQUNaSyxRQUFZLEVBQU9OLEtBQUssVUFBV0ssRUFBUyxDQUFFM0IsWUFBWSxJQUMxREUsT0FBTzZGLEVBQUVuRSxJQUFNQSxFQUNmL0YsUUFBUUYsSUFBSWlHLEdBQ1pvQyxFQUFXcEMsRUFBSTdGLEdBQUdvRSxPQUFRLEdBQzFCc0QsRUFBVSxFQUFNZixFQUFFLFVBQ1hkLElBS1IxQixPQUFPNkYsRUFBSSxDQUFFQyxZQUFBLEVBQWFwRSxNQUFLdE4sYyIsImZpbGUiOiJkaXN0L2dhbWUtd2luZG93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwiKGZ1bmN0aW9uKGUsIGEpIHsgZm9yKHZhciBpIGluIGEpIGVbaV0gPSBhW2ldOyB9KGV4cG9ydHMsIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcclxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXHJcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxyXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcclxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxyXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xyXG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcclxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXHJcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XHJcbi8qKioqKiovIFx0XHR9O1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXHJcbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcclxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXHJcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqL1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxyXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XHJcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XHJcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdH07XHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xyXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcclxuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xyXG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8qKioqKiovIFx0fTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcclxuLyoqKioqKi8gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcclxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcclxuLyoqKioqKi8gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcclxuLyoqKioqKi8gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcclxuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xyXG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcclxuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XHJcbi8qKioqKiovIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcclxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcclxuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcclxuLyoqKioqKi8gXHRcdHJldHVybiBucztcclxuLyoqKioqKi8gXHR9O1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cclxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcclxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcclxuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcclxuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XHJcbi8qKioqKiovIFx0fTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcclxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cclxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xyXG4vKioqKioqL1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xyXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xyXG4vKioqKioqLyB9KVxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4vKioqKioqLyAoW1xyXG4vKiAwICovXHJcbi8qKiovIChmdW5jdGlvbihfX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG4vLyBFU00gQ09NUEFUIEZMQUdcclxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xyXG5cclxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvQ29vcmRzLmpzXHJcbmNsYXNzIENvb3JkcyB7XHJcblx0Y29uc3RydWN0b3IoeCA9IDAsIHkgPSAwKSB7XHJcblx0XHR0aGlzLnggPSB4O1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHR9XHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU2V0IGNvb3JkaW5hdGVzIChNdXRhdGlvbnMpXHJcblx0LyoqIFNldCB0aGUgY29vcmRpbmF0ZXMgKi9cclxuXHRzZXQoe3gsIHl9KSB7XHJcblx0XHR0aGlzLnggPSB4IHx8IDA7XHJcblx0XHR0aGlzLnkgPSB5IHx8IDA7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0LyoqIFNldCB4IGFuZCB5IHRvIHplcm8gKi9cclxuXHRjbGVhcigpIHtcclxuXHRcdHRoaXMueCA9IDA7XHJcblx0XHR0aGlzLnkgPSAwO1xyXG5cdH1cclxuXHQvKiogSWYgdGhlIGNvb3JkaW5hdGUgeCB5IHZhbHVlcyBhcmUgaW52YWxpZCwgdHJ5IHRvIGZpeCB0aGVtICovXHJcblx0Zml4KCkge1xyXG5cdFx0aWYgKHRoaXMuY2hlY2soKSkgeyByZXR1cm4gdHJ1ZTsgfSAvLyBEaWRuJ3QgbmVlZCBmaXhpbmdcclxuXHRcdHRoaXMueCA9IE51bWJlcih0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gTnVtYmVyKHRoaXMueSk7XHJcblx0XHRpZiAodGhpcy5jaGVjaygpKSB7IHJldHVybiB0cnVlOyB9IC8vIEZpeGVkIGFuZCB2YWx1ZXMgc2hvdWxkIGJlIHdoYXQgeW91J2QgZXhwZWN0XHJcblx0XHR0aGlzLnggPSAwO1xyXG5cdFx0dGhpcy55ID0gMDtcclxuXHRcdHJldHVybiBmYWxzZTsgLy8gRml4ZWQgYW5kIHZhbHVlcyBjb3VsZCBub3QgYmUgc2FsdmFnZWQgc28gemVyb2VzIHdlcmUgdXNlZFxyXG5cdH1cclxuXHQvKiogQWRkIGNvb3JkaW5hdGVzIGJ5IGFub3RoZXIge3gsIHl9IGNvb3JkaW5hdGUgKi9cclxuXHRhZGQoe3gsIHl9KSB7XHJcblx0XHR0aGlzLnggKz0geCB8fCAwO1xyXG5cdFx0dGhpcy55ICs9IHkgfHwgMDtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHQvKiogU3VidHJhY3QgY29vcmRpbmF0ZXMgYnkgYW5vdGhlciB7eCwgeX0gY29vcmRpbmF0ZSAqL1xyXG5cdHN1YnRyYWN0KHt4LCB5fSkge1xyXG5cdFx0dGhpcy54IC09IHggfHwgMDtcclxuXHRcdHRoaXMueSAtPSB5IHx8IDA7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0LyoqIE11bHRpcGx5IGNvb3JkaW5hdGVzIGJ5IGEgbnVtYmVyICovXHJcblx0bXVsdGlwbHkobSkge1xyXG5cdFx0dGhpcy54ICo9IG0gfHwgMTtcclxuXHRcdHRoaXMueSAqPSBtIHx8IDE7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0LyoqIFNldCBjb29yZGluYXRlcyB0byBhYnNvbHV0ZSB2YWx1ZXMgKi9cclxuXHRhYnMoKSB7XHJcblx0XHR0aGlzLnggPSBNYXRoLmFicyh0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5hYnModGhpcy55KTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRyb3VuZCgpIHtcclxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQodGhpcy54KTtcclxuXHRcdHRoaXMueSA9IE1hdGgucm91bmQodGhpcy55KTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRyZXZlcnNlKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHkoLTEpO1xyXG5cdH1cclxuXHRub3JtYWxpemUoKSB7XHJcblx0XHRjb25zdCB2ZWN0b3JMZW5ndGggPSB0aGlzLmdldE1hZ25pdHVkZSgpO1xyXG5cdFx0aWYgKHZlY3Rvckxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHR0aGlzLnggPSAwO1xyXG5cdFx0XHR0aGlzLnkgPSAwO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHRcdHRoaXMueCA9IHRoaXMueCAvIHZlY3Rvckxlbmd0aDtcclxuXHRcdHRoaXMueSA9IHRoaXMueSAvIHZlY3Rvckxlbmd0aDtcclxuXHRcdHJldHVybiB0aGlzO1x0XHRcclxuXHR9XHJcblx0c2V0TWFnbml0dWRlKG0pIHtcclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5KG0pO1xyXG5cdH1cclxuXHRzZXRUYW5nZW50KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuc2V0KHRoaXMueSwgdGhpcy54KTtcclxuXHR9XHJcblxyXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEdldCB2YWx1ZXNcclxuXHRnZXREaXN0YW5jZSh7eCwgeX0pIHtcclxuXHRcdHJldHVybiBNYXRoLnNxcnQoIE1hdGgucG93KCh0aGlzLnggLSB4KSwgMikgKyBNYXRoLnBvdygodGhpcy55IC0geSksIDIpICk7XHJcblx0fVxyXG5cdGdldEFic29sdXRlRGlzdGFuY2UoY29vcmRzID0ge30pIHtcclxuXHRcdHJldHVybiBNYXRoLmFicyh0aGlzLmdldERpc3RhbmNlKGNvb3JkcykpO1xyXG5cdH1cclxuXHRnZXRNYWduaXR1ZGUoKSB7XHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLnBvdyh0aGlzLngsIDIpICsgTWF0aC5wb3codGhpcy55LCAyKVx0KTtcclxuXHR9XHJcblxyXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENsb25pbmcgLSBSZXR1cm5zIGEgbmV3IG9iamVjdFxyXG5cdC8qKiBDcmVhdGUgYSBjb3B5IG9mIHRoZXNlIGNvb3JkaW5hdGVzICh1c2VmdWwgdG8gYXZvaWQgbXV0YXRpbmcgYSBjb29yZGluYXRlcyBvYmplY3QpICovXHJcblx0Y2xvbmUoKSB7XHJcblx0XHRyZXR1cm4gbmV3IENvb3Jkcyh0aGlzLngsIHRoaXMueSk7XHJcblx0fVxyXG5cdGdldE11bHRpcGx5KG0pIHtcclxuXHRcdHJldHVybiBuZXcgQ29vcmRzKHRoaXMueCAqIG0sIHRoaXMueSAqIG0pO1xyXG5cdH1cclxuXHRnZXREb3Qoe3gsIHl9KXtcclxuXHRcdHJldHVybiAoKHRoaXMueCAqIHgpICsgKHRoaXMueSAqIHkpKTtcclxuXHR9XHJcblx0Z2V0VW5pdFZlY3Rvcihjb29yZHMgPSB7fSkge1xyXG5cdFx0Y29uc3QgZCA9IHRoaXMuZ2V0QWJzb2x1dGVEaXN0YW5jZShjb29yZHMpO1xyXG5cdFx0aWYgKGQgPT09IDApIHsgcmV0dXJuIG5ldyBDb29yZHMoMCwgMCk7IH1cclxuXHRcdGNvbnN0IGR4ID0gY29vcmRzLnggLSB0aGlzLng7XHJcblx0XHRjb25zdCBkeSA9IGNvb3Jkcy55IC0gdGhpcy55O1xyXG5cdFx0Y29uc3QgeCA9IGR4IC8gZDtcclxuXHRcdGNvbnN0IHkgPSBkeSAvIGQ7XHJcblx0XHRyZXR1cm4gbmV3IENvb3Jkcyh4LCB5KTtcclxuXHR9XHJcblx0Z2V0VW5pdFZlY3RvclRhbmdlbnQoY29vcmRzID0ge30pIHtcclxuXHRcdGNvbnN0IGQgPSB0aGlzLmdldEFic29sdXRlRGlzdGFuY2UoY29vcmRzKTtcclxuXHRcdGlmIChkID09PSAwKSB7IHJldHVybiBuZXcgQ29vcmRzKDAsIDApOyB9XHJcblx0XHRjb25zdCB4ID0gKGNvb3Jkcy55IC0gdGhpcy55KSAvIGQ7XHJcblx0XHRjb25zdCB5ID0gKHRoaXMueCAtIGNvb3Jkcy54KSAvIGQ7XHJcblx0XHRyZXR1cm4gbmV3IENvb3Jkcyh4LCB5KTtcclxuXHR9XHJcblx0Z2V0UGVycGVuZGljdWxhclZlY3RvcihsZWZ0ID0gZmFsc2UpIHtcclxuXHRcdHJldHVybiAobGVmdCkgPyBuZXcgQ29vcmRzKC0xICogdGhpcy55LCB0aGlzLngpIDogbmV3IENvb3Jkcyh0aGlzLnksIC0xICogdGhpcy54KTtcclxuXHR9XHJcblx0Z2V0VGFuZ2VudCgpIHtcclxuXHRcdHJldHVybiBuZXcgQ29vcmRzKHRoaXMueSwgdGhpcy54KTtcclxuXHR9XHJcblxyXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENoZWNrcyAoVHJ1ZS9GYWxzZSlcclxuXHQvKiogRGV0ZXJtaW5lIGlmIHRoZSBjb29yZGluYXRlcycgeCB5IHZhbHVlcyBhcmUgdmFsaWQgbnVtYmVycyAqL1xyXG5cdGNoZWNrKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0dHlwZW9mIHRoaXMueCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHRoaXMueSA9PT0gJ251bWJlcicgJiZcclxuXHRcdFx0IWlzTmFOKHRoaXMueCkgJiYgIWlzTmFOKHRoaXMueSlcclxuXHRcdCk7XHJcblx0fVxyXG5cdGlzRXF1YWwoe3gsIHl9KSB7XHJcblx0XHRyZXR1cm4gKHRoaXMueCA9PT0geCAmJiB0aGlzLnkgPT09IHkpO1xyXG5cdH1cclxuXHRpc0VxdWFsSW50ZWdlcih7eCwgeX0pIHtcclxuXHRcdHJldHVybiAoTWF0aC5yb3VuZCh0aGlzLngpID09PSBNYXRoLnJvdW5kKHgpICYmIE1hdGgucm91bmQodGhpcy55KSA9PT0gTWF0aC5yb3VuZCh5KSk7XHJcblx0fVxyXG5cclxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQb2xhciBDb29yZGluYXRlIE1ldGhvZHNcclxuXHRzZXRCeVBvbGFyQ29vcmRzKHIsIHRoZXRhKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5zZXQoe1xyXG5cdFx0XHR4OiAociAqIE1hdGguY29zKHRoZXRhKSksXHJcblx0XHRcdHk6IChyICogTWF0aC5zaW4odGhldGEpKVxyXG5cdFx0fSkgO1xyXG5cdH07XHJcblx0Ly8gc3RhdGljIGNvbnZlcnRQb2xhclRvQ2FydGVzaWFuQ29vcmRzKHIsIHRoZXRhKSB7XHJcblx0Ly8gXHR2YXIgeCA9IHIgKiBNYXRoLmNvcyh0aGV0YSk7XHJcblx0Ly8gXHR2YXIgeSA9IHIgKiBNYXRoLnNpbih0aGV0YSk7XHJcblx0Ly8gXHRyZXR1cm4gKG5ldyBDb29yZHMoeCwgeSkpO1xyXG5cdC8vIH07XHJcblx0cm90YXRlKGRlbHRhVGhldGEsIGFyb3VuZE9yaWdpbkNvb3Jkcykge1xyXG5cdFx0dGhpcy5zdWJ0cmFjdChhcm91bmRPcmlnaW5Db29yZHMpO1xyXG5cdFx0dGhpcy5zZXRCeVBvbGFyQ29vcmRzKHRoaXMuciwgKHRoaXMudGhldGEgKyBkZWx0YVRoZXRhKSk7XHJcblx0XHR0aGlzLmFkZChhcm91bmRPcmlnaW5Db29yZHMpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHQvKiogR2V0IHJhZGl1cyB0byB0aGUgY2VudGVyICgwLDApICovXHJcblx0Z2V0UmFkaXVzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0RGlzdGFuY2Uoe3g6IDAsIHk6IDB9KTtcclxuXHR9XHJcblx0c2V0UmFkaXVzKHIpIHtcclxuXHRcdHRoaXMuc2V0QnlQb2xhckNvb3JkcyhyLCB0aGlzLmdldFRoZXRhKCkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdGdldFRoZXRhKCkge1xyXG5cdFx0cmV0dXJuIE1hdGguYXRhbjIodGhpcy55LCB0aGlzLngpOyAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84ODk4OTY1LzE3NjYyMzBcclxuXHR9XHJcblx0c2V0VGhldGEodGhldGEpIHtcclxuXHRcdHRoaXMuc2V0QnlQb2xhckNvb3Jkcyh0aGlzLmdldFJhZGl1cygpLCB0aGV0YSk7XHJcblx0fVxyXG5cdGdldERlZ3JlZXMoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXRUaGV0YSgpICogKDE4MC9NYXRoLlBJKVxyXG5cdH1cclxuXHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQWxpYXNlc1xyXG5cdGVxdWFscyhjb29yZHMgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuaXNFcXVhbChjb29yZHMpO1xyXG5cdH1cclxuXHRjb3B5KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuY2xvbmUoKTtcclxuXHR9XHJcblx0Z2V0Q29weSgpIHtcclxuXHRcdHJldHVybiB0aGlzLmNsb25lKCk7XHJcblx0fVxyXG5cdGdldENsb25lKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuY2xvbmUoKTtcclxuXHR9XHJcbn1cclxuXHJcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19Db29yZHMgPSAoQ29vcmRzKTtcclxuXHJcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vaW5kZXgubWpzXHJcblxyXG5cclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgaW5kZXggPSBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9ICh7IENvb3Jkczogc3JjX0Nvb3JkcyB9KTtcclxuXHJcblxyXG4vKioqLyB9KVxyXG4vKioqKioqLyBdKVtcImRlZmF1bHRcIl0pKTsiLCIoZnVuY3Rpb24oZSwgYSkgeyBmb3IodmFyIGkgaW4gYSkgZVtpXSA9IGFbaV07IH0oZXhwb3J0cywgLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxyXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcclxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXHJcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xyXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXHJcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XHJcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxyXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcclxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cclxuLyoqKioqKi8gXHRcdH07XHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cclxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxyXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcclxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovXHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcclxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcclxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcclxuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcclxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0fTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xyXG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XHJcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLyoqKioqKi8gXHR9O1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxyXG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxyXG4vKioqKioqLyBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xyXG4vKioqKioqLyBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxyXG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcclxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xyXG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XHJcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xyXG4vKioqKioqLyBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcclxuLyoqKioqKi8gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xyXG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xyXG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xyXG4vKioqKioqLyBcdH07XHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcclxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcclxuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xyXG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxyXG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xyXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcclxuLyoqKioqKi8gXHR9O1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxyXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xyXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XHJcbi8qKioqKiovXHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXHJcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XHJcbi8qKioqKiovIH0pXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbi8qKioqKiovIChbXHJcbi8qIDAgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKF9fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIEVTTSBDT01QQVQgRkxBR1xyXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XHJcblxyXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9Db29yZHMuanNcclxuY2xhc3MgQ29vcmRzIHtcclxuXHRjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDApIHtcclxuXHRcdHRoaXMueCA9IHg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cdH1cclxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTZXQgY29vcmRpbmF0ZXMgKE11dGF0aW9ucylcclxuXHQvKiogU2V0IHRoZSBjb29yZGluYXRlcyAqL1xyXG5cdHNldCh7eCwgeX0pIHtcclxuXHRcdHRoaXMueCA9IHggfHwgMDtcclxuXHRcdHRoaXMueSA9IHkgfHwgMDtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHQvKiogU2V0IHggYW5kIHkgdG8gemVybyAqL1xyXG5cdGNsZWFyKCkge1xyXG5cdFx0dGhpcy54ID0gMDtcclxuXHRcdHRoaXMueSA9IDA7XHJcblx0fVxyXG5cdC8qKiBJZiB0aGUgY29vcmRpbmF0ZSB4IHkgdmFsdWVzIGFyZSBpbnZhbGlkLCB0cnkgdG8gZml4IHRoZW0gKi9cclxuXHRmaXgoKSB7XHJcblx0XHRpZiAodGhpcy5jaGVjaygpKSB7IHJldHVybiB0cnVlOyB9IC8vIERpZG4ndCBuZWVkIGZpeGluZ1xyXG5cdFx0dGhpcy54ID0gTnVtYmVyKHRoaXMueCk7XHJcblx0XHR0aGlzLnkgPSBOdW1iZXIodGhpcy55KTtcclxuXHRcdGlmICh0aGlzLmNoZWNrKCkpIHsgcmV0dXJuIHRydWU7IH0gLy8gRml4ZWQgYW5kIHZhbHVlcyBzaG91bGQgYmUgd2hhdCB5b3UnZCBleHBlY3RcclxuXHRcdHRoaXMueCA9IDA7XHJcblx0XHR0aGlzLnkgPSAwO1xyXG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBGaXhlZCBhbmQgdmFsdWVzIGNvdWxkIG5vdCBiZSBzYWx2YWdlZCBzbyB6ZXJvZXMgd2VyZSB1c2VkXHJcblx0fVxyXG5cdC8qKiBBZGQgY29vcmRpbmF0ZXMgYnkgYW5vdGhlciB7eCwgeX0gY29vcmRpbmF0ZSAqL1xyXG5cdGFkZCh7eCwgeX0pIHtcclxuXHRcdHRoaXMueCArPSB4IHx8IDA7XHJcblx0XHR0aGlzLnkgKz0geSB8fCAwO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdC8qKiBTdWJ0cmFjdCBjb29yZGluYXRlcyBieSBhbm90aGVyIHt4LCB5fSBjb29yZGluYXRlICovXHJcblx0c3VidHJhY3Qoe3gsIHl9KSB7XHJcblx0XHR0aGlzLnggLT0geCB8fCAwO1xyXG5cdFx0dGhpcy55IC09IHkgfHwgMDtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHQvKiogTXVsdGlwbHkgY29vcmRpbmF0ZXMgYnkgYSBudW1iZXIgKi9cclxuXHRtdWx0aXBseShtKSB7XHJcblx0XHR0aGlzLnggKj0gbSB8fCAxO1xyXG5cdFx0dGhpcy55ICo9IG0gfHwgMTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHQvKiogU2V0IGNvb3JkaW5hdGVzIHRvIGFic29sdXRlIHZhbHVlcyAqL1xyXG5cdGFicygpIHtcclxuXHRcdHRoaXMueCA9IE1hdGguYWJzKHRoaXMueCk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLmFicyh0aGlzLnkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdHJvdW5kKCkge1xyXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCh0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCh0aGlzLnkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdHJldmVyc2UoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseSgtMSk7XHJcblx0fVxyXG5cdG5vcm1hbGl6ZSgpIHtcclxuXHRcdGNvbnN0IHZlY3Rvckxlbmd0aCA9IHRoaXMuZ2V0TWFnbml0dWRlKCk7XHJcblx0XHRpZiAodmVjdG9yTGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdHRoaXMueCA9IDA7XHJcblx0XHRcdHRoaXMueSA9IDA7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy54ID0gdGhpcy54IC8gdmVjdG9yTGVuZ3RoO1xyXG5cdFx0dGhpcy55ID0gdGhpcy55IC8gdmVjdG9yTGVuZ3RoO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHRcdFxyXG5cdH1cclxuXHRzZXRNYWduaXR1ZGUobSkge1xyXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHkobSk7XHJcblx0fVxyXG5cdHNldFRhbmdlbnQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5zZXQodGhpcy55LCB0aGlzLngpO1xyXG5cdH1cclxuXHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gR2V0IHZhbHVlc1xyXG5cdGdldERpc3RhbmNlKHt4LCB5fSkge1xyXG5cdFx0cmV0dXJuIE1hdGguc3FydCggTWF0aC5wb3coKHRoaXMueCAtIHgpLCAyKSArIE1hdGgucG93KCh0aGlzLnkgLSB5KSwgMikgKTtcclxuXHR9XHJcblx0Z2V0QWJzb2x1dGVEaXN0YW5jZShjb29yZHMgPSB7fSkge1xyXG5cdFx0cmV0dXJuIE1hdGguYWJzKHRoaXMuZ2V0RGlzdGFuY2UoY29vcmRzKSk7XHJcblx0fVxyXG5cdGdldE1hZ25pdHVkZSgpIHtcclxuXHRcdHJldHVybiBNYXRoLnNxcnQoIE1hdGgucG93KHRoaXMueCwgMikgKyBNYXRoLnBvdyh0aGlzLnksIDIpXHQpO1xyXG5cdH1cclxuXHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2xvbmluZyAtIFJldHVybnMgYSBuZXcgb2JqZWN0XHJcblx0LyoqIENyZWF0ZSBhIGNvcHkgb2YgdGhlc2UgY29vcmRpbmF0ZXMgKHVzZWZ1bCB0byBhdm9pZCBtdXRhdGluZyBhIGNvb3JkaW5hdGVzIG9iamVjdCkgKi9cclxuXHRjbG9uZSgpIHtcclxuXHRcdHJldHVybiBuZXcgQ29vcmRzKHRoaXMueCwgdGhpcy55KTtcclxuXHR9XHJcblx0Z2V0TXVsdGlwbHkobSkge1xyXG5cdFx0cmV0dXJuIG5ldyBDb29yZHModGhpcy54ICogbSwgdGhpcy55ICogbSk7XHJcblx0fVxyXG5cdGdldERvdCh7eCwgeX0pe1xyXG5cdFx0cmV0dXJuICgodGhpcy54ICogeCkgKyAodGhpcy55ICogeSkpO1xyXG5cdH1cclxuXHRnZXRVbml0VmVjdG9yKGNvb3JkcyA9IHt9KSB7XHJcblx0XHRjb25zdCBkID0gdGhpcy5nZXRBYnNvbHV0ZURpc3RhbmNlKGNvb3Jkcyk7XHJcblx0XHRpZiAoZCA9PT0gMCkgeyByZXR1cm4gbmV3IENvb3JkcygwLCAwKTsgfVxyXG5cdFx0Y29uc3QgZHggPSBjb29yZHMueCAtIHRoaXMueDtcclxuXHRcdGNvbnN0IGR5ID0gY29vcmRzLnkgLSB0aGlzLnk7XHJcblx0XHRjb25zdCB4ID0gZHggLyBkO1xyXG5cdFx0Y29uc3QgeSA9IGR5IC8gZDtcclxuXHRcdHJldHVybiBuZXcgQ29vcmRzKHgsIHkpO1xyXG5cdH1cclxuXHRnZXRVbml0VmVjdG9yVGFuZ2VudChjb29yZHMgPSB7fSkge1xyXG5cdFx0Y29uc3QgZCA9IHRoaXMuZ2V0QWJzb2x1dGVEaXN0YW5jZShjb29yZHMpO1xyXG5cdFx0aWYgKGQgPT09IDApIHsgcmV0dXJuIG5ldyBDb29yZHMoMCwgMCk7IH1cclxuXHRcdGNvbnN0IHggPSAoY29vcmRzLnkgLSB0aGlzLnkpIC8gZDtcclxuXHRcdGNvbnN0IHkgPSAodGhpcy54IC0gY29vcmRzLngpIC8gZDtcclxuXHRcdHJldHVybiBuZXcgQ29vcmRzKHgsIHkpO1xyXG5cdH1cclxuXHRnZXRQZXJwZW5kaWN1bGFyVmVjdG9yKGxlZnQgPSBmYWxzZSkge1xyXG5cdFx0cmV0dXJuIChsZWZ0KSA/IG5ldyBDb29yZHMoLTEgKiB0aGlzLnksIHRoaXMueCkgOiBuZXcgQ29vcmRzKHRoaXMueSwgLTEgKiB0aGlzLngpO1xyXG5cdH1cclxuXHRnZXRUYW5nZW50KCkge1xyXG5cdFx0cmV0dXJuIG5ldyBDb29yZHModGhpcy55LCB0aGlzLngpO1xyXG5cdH1cclxuXHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ2hlY2tzIChUcnVlL0ZhbHNlKVxyXG5cdC8qKiBEZXRlcm1pbmUgaWYgdGhlIGNvb3JkaW5hdGVzJyB4IHkgdmFsdWVzIGFyZSB2YWxpZCBudW1iZXJzICovXHJcblx0Y2hlY2soKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHR0eXBlb2YgdGhpcy54ID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdGhpcy55ID09PSAnbnVtYmVyJyAmJlxyXG5cdFx0XHQhaXNOYU4odGhpcy54KSAmJiAhaXNOYU4odGhpcy55KVxyXG5cdFx0KTtcclxuXHR9XHJcblx0aXNFcXVhbCh7eCwgeX0pIHtcclxuXHRcdHJldHVybiAodGhpcy54ID09PSB4ICYmIHRoaXMueSA9PT0geSk7XHJcblx0fVxyXG5cdGlzRXF1YWxJbnRlZ2VyKHt4LCB5fSkge1xyXG5cdFx0cmV0dXJuIChNYXRoLnJvdW5kKHRoaXMueCkgPT09IE1hdGgucm91bmQoeCkgJiYgTWF0aC5yb3VuZCh0aGlzLnkpID09PSBNYXRoLnJvdW5kKHkpKTtcclxuXHR9XHJcblxyXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBvbGFyIENvb3JkaW5hdGUgTWV0aG9kc1xyXG5cdHNldEJ5UG9sYXJDb29yZHMociwgdGhldGEpIHtcclxuXHRcdHJldHVybiB0aGlzLnNldCh7XHJcblx0XHRcdHg6IChyICogTWF0aC5jb3ModGhldGEpKSxcclxuXHRcdFx0eTogKHIgKiBNYXRoLnNpbih0aGV0YSkpXHJcblx0XHR9KSA7XHJcblx0fTtcclxuXHQvLyBzdGF0aWMgY29udmVydFBvbGFyVG9DYXJ0ZXNpYW5Db29yZHMociwgdGhldGEpIHtcclxuXHQvLyBcdHZhciB4ID0gciAqIE1hdGguY29zKHRoZXRhKTtcclxuXHQvLyBcdHZhciB5ID0gciAqIE1hdGguc2luKHRoZXRhKTtcclxuXHQvLyBcdHJldHVybiAobmV3IENvb3Jkcyh4LCB5KSk7XHJcblx0Ly8gfTtcclxuXHRyb3RhdGUoZGVsdGFUaGV0YSwgYXJvdW5kT3JpZ2luQ29vcmRzKSB7XHJcblx0XHR0aGlzLnN1YnRyYWN0KGFyb3VuZE9yaWdpbkNvb3Jkcyk7XHJcblx0XHR0aGlzLnNldEJ5UG9sYXJDb29yZHModGhpcy5yLCAodGhpcy50aGV0YSArIGRlbHRhVGhldGEpKTtcclxuXHRcdHRoaXMuYWRkKGFyb3VuZE9yaWdpbkNvb3Jkcyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cdC8qKiBHZXQgcmFkaXVzIHRvIHRoZSBjZW50ZXIgKDAsMCkgKi9cclxuXHRnZXRSYWRpdXMoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXREaXN0YW5jZSh7eDogMCwgeTogMH0pO1xyXG5cdH1cclxuXHRzZXRSYWRpdXMocikge1xyXG5cdFx0dGhpcy5zZXRCeVBvbGFyQ29vcmRzKHIsIHRoaXMuZ2V0VGhldGEoKSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0Z2V0VGhldGEoKSB7XHJcblx0XHRyZXR1cm4gTWF0aC5hdGFuMih0aGlzLnksIHRoaXMueCk7IC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg4OTg5NjUvMTc2NjIzMFxyXG5cdH1cclxuXHRzZXRUaGV0YSh0aGV0YSkge1xyXG5cdFx0dGhpcy5zZXRCeVBvbGFyQ29vcmRzKHRoaXMuZ2V0UmFkaXVzKCksIHRoZXRhKTtcclxuXHR9XHJcblx0Z2V0RGVncmVlcygpIHtcclxuXHRcdHJldHVybiB0aGlzLmdldFRoZXRhKCkgKiAoMTgwL01hdGguUEkpXHJcblx0fVxyXG5cclxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBBbGlhc2VzXHJcblx0ZXF1YWxzKGNvb3JkcyA9IHt9KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pc0VxdWFsKGNvb3Jkcyk7XHJcblx0fVxyXG5cdGNvcHkoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5jbG9uZSgpO1xyXG5cdH1cclxuXHRnZXRDb3B5KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuY2xvbmUoKTtcclxuXHR9XHJcblx0Z2V0Q2xvbmUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5jbG9uZSgpO1xyXG5cdH1cclxufVxyXG5cclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX0Nvb3JkcyA9IChDb29yZHMpO1xyXG5cclxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9pbmRleC5tanNcclxuXHJcblxyXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBpbmRleCA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKHsgQ29vcmRzOiBzcmNfQ29vcmRzIH0pO1xyXG5cclxuXHJcbi8qKiovIH0pXHJcbi8qKioqKiovIF0pW1wiZGVmYXVsdFwiXSkpOyIsImltcG9ydCB7IENvb3JkcyB9IGZyb20gJ3JvY2tldC1ib290cy1jb29yZHMnO1xyXG5cclxuY2xhc3MgUG9seWdvbiB7XHJcblx0Y29uc3RydWN0b3IodmVydHMpIHtcclxuXHRcdHRoaXMudmVydHMgPSB2ZXJ0cztcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRSZWd1bGFyUG9seWdvblZlcnRzKG4gPSAzLCByID0gMSkge1xyXG5cdFx0Y29uc3QgdmVydHMgPSBbXTtcclxuXHRcdGNvbnN0IGEgPSAwO1xyXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xyXG5cdFx0XHQvLyBUaGFua3MgdG8gaHR0cHM6Ly95b3V0dS5iZS9IOUNTV014Sng4ND90PTI3MjlcclxuXHRcdFx0dmVydHMucHVzaChbXHJcblx0XHRcdFx0ciAqIE1hdGguY29zKGEgKyBpICogTWF0aC5QSSAqIDIgLyBuKSwgLy8geFxyXG5cdFx0XHRcdHIgKiBNYXRoLnNpbihhICsgaSAqIE1hdGguUEkgKiAyIC8gbiksIC8vIHlcclxuXHRcdFx0XHQwXHJcblx0XHRcdF0pO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHZlcnRzO1xyXG5cdH1cclxuXHJcblx0LyoqIElzIGFuIGFycmF5IG9mIHZlcnRpY2VzIGluc2lkZSB0aGlzIG9iamVjdCdzIHZlcnRpY2VzPyAqL1xyXG5cdG9iamVjdEluc2lkZShvYmopIHtcclxuXHRcdGNvbnN0IHsgdmVydHMgfSA9IG9iajtcclxuXHRcdGZvcihsZXQgaSA9IDA7IGkgPCB2ZXJ0cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAoUG9seWdvbi5wb2ludEluUG9seWdvbih2ZXJ0c1tpXSwgdGhpcy52ZXJ0cykpIHtcclxuXHRcdFx0XHQvLyBjb25zdCB0ZXh0ID0gJ3BvaW50IFsnICsgdmVydHNbaV0uam9pbignLCcpICsgJ10gaW4gbXkgdmVydHMgJyArIHRoaXMudmVydHMuam9pbignLCcpO1xyXG5cdFx0XHRcdC8vIC8vIGNvbnNvbGUubG9nKCdwb2ludCcsIHZlcnRzW2ldLCAnZnJvbScsIHZlcnRzLCAnaW4gbXkgdmVydHMnLCB0aGlzLnZlcnRzKTtcclxuXHRcdFx0XHQvLyB0aGlzLmhpdHMucHVzaCh0ZXh0KTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldENlbnRlcih2ZXJ0cykge1xyXG5cdFx0Y29uc3QgdmwgPSB2ZXJ0cy5sZW5ndGg7XHJcblx0XHRyZXR1cm4gdmVydHMucmVkdWNlKCh2ZXJ0U3VtLCBidikgPT4ge1xyXG5cdFx0XHRyZXR1cm4gW3ZlcnRTdW1bMF0gKyBidlswXSAvIHZsLCB2ZXJ0U3VtWzFdICsgYnZbMV0gLyB2bF07XHJcblx0XHR9LCBbMCwwXSk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0UmFkaXVzKFsgeCwgeSBdKSB7IC8vIGFzc3VtZXMgYSBjZW50ZXIgcG9pbnQgb2YgMCwwXHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHgsIDIpXHQrIE1hdGgucG93KHksIDIpKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRSYWRpaSh2ZXJ0cykge1xyXG5cdFx0Ly8gSW5uZXIgLSBzbWFsbGVzdCByYWRpdXNcclxuXHRcdGxldCBpbm5lciA9IEluZmluaXR5O1xyXG5cdFx0Ly8gT3V0ZXIvbGFyZ2VzdCByYWRpdXNcclxuXHRcdGNvbnN0IG91dGVyID0gdmVydHMucmVkdWNlKChuLCBidikgPT4ge1xyXG5cdFx0XHRjb25zdCBkID0gUG9seWdvbi5nZXRSYWRpdXMoYnYpO1xyXG5cdFx0XHRpZiAoZCA8IGlubmVyKSB7IGlubmVyID0gZDsgfVxyXG5cdFx0XHRyZXR1cm4gKGQgPiBuKSA/IGQgOiBuO1xyXG5cdFx0fSwgMCk7XHJcblx0XHRyZXR1cm4geyBpbm5lciwgb3V0ZXIgfTtcclxuXHR9XHJcblxyXG5cdC8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL3N1YnN0YWNrL3BvaW50LWluLXBvbHlnb25cclxuXHQvLyByYXktY2FzdGluZyBhbGdvcml0aG0gYmFzZWQgb25cclxuXHQvLyBodHRwOi8vd3d3LmVjc2UucnBpLmVkdS9Ib21lcGFnZXMvd3JmL1Jlc2VhcmNoL1Nob3J0X05vdGVzL3BucG9seS5odG1sXHJcblx0c3RhdGljIHBvaW50SW5Qb2x5Z29uIChwb2ludCwgdnMpIHtcclxuXHRcdGNvbnN0IHggPSBwb2ludFswXSwgeSA9IHBvaW50WzFdO1xyXG5cdFx0XHJcblx0XHRsZXQgaW5zaWRlID0gZmFsc2U7XHJcblx0XHRmb3IgKGxldCBpID0gMCwgaiA9IHZzLmxlbmd0aCAtIDE7IGkgPCB2cy5sZW5ndGg7IGogPSBpKyspIHtcclxuXHRcdFx0Y29uc3QgeGkgPSB2c1tpXVswXSwgeWkgPSB2c1tpXVsxXTtcclxuXHRcdFx0Y29uc3QgeGogPSB2c1tqXVswXSwgeWogPSB2c1tqXVsxXTtcclxuXHRcdFx0Y29uc3QgaW50ZXJzZWN0ID0gKCh5aSA+IHkpICE9ICh5aiA+IHkpKVxyXG5cdFx0XHRcdCYmICh4IDwgKHhqIC0geGkpICogKHkgLSB5aSkgLyAoeWogLSB5aSkgKyB4aSk7XHJcblx0XHRcdGlmIChpbnRlcnNlY3QpIGluc2lkZSA9ICFpbnNpZGU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gaW5zaWRlO1xyXG5cdH07XHJcblxyXG5cdC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMjQxNDk1MS8xNzY2MjMwXHJcblx0LyoqXHJcblx0ICogSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZXJlIGlzIGFuIGludGVyc2VjdGlvbiBiZXR3ZWVuIHRoZSB0d28gcG9seWdvbnMgZGVzY3JpYmVkXHJcblx0ICogYnkgdGhlIGxpc3RzIG9mIHZlcnRpY2VzLiBVc2VzIHRoZSBTZXBhcmF0aW5nIEF4aXMgVGhlb3JlbVxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGEgYW4gYXJyYXkgb2YgY29ubmVjdGVkIHBvaW50cyBbe3g6LCB5On0sIHt4OiwgeTp9LC4uLl0gdGhhdCBmb3JtIGEgY2xvc2VkIHBvbHlnb25cclxuXHQgKiBAcGFyYW0gYiBhbiBhcnJheSBvZiBjb25uZWN0ZWQgcG9pbnRzIFt7eDosIHk6fSwge3g6LCB5On0sLi4uXSB0aGF0IGZvcm0gYSBjbG9zZWQgcG9seWdvblxyXG5cdCAqIEByZXR1cm4gdHJ1ZSBpZiB0aGVyZSBpcyBhbnkgaW50ZXJzZWN0aW9uIGJldHdlZW4gdGhlIDIgcG9seWdvbnMsIGZhbHNlIG90aGVyd2lzZVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBkb1BvbHlnb25zSW50ZXJzZWN0IChhLCBiKSB7XHJcblx0XHR2YXIgcG9seWdvbnMgPSBbYSwgYl07XHJcblx0XHR2YXIgbWluQSwgbWF4QSwgcHJvamVjdGVkLCBpLCBpMSwgaiwgbWluQiwgbWF4QjtcclxuXHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgcG9seWdvbnMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdC8vIGZvciBlYWNoIHBvbHlnb24sIGxvb2sgYXQgZWFjaCBlZGdlIG9mIHRoZSBwb2x5Z29uLCBhbmQgZGV0ZXJtaW5lIGlmIGl0IHNlcGFyYXRlc1xyXG5cdFx0XHQvLyB0aGUgdHdvIHNoYXBlc1xyXG5cdFx0XHR2YXIgcG9seWdvbiA9IHBvbHlnb25zW2ldO1xyXG5cdFx0XHRmb3IgKGkxID0gMDsgaTEgPCBwb2x5Z29uLmxlbmd0aDsgaTErKykge1xyXG5cclxuXHRcdFx0XHQvLyBncmFiIDIgdmVydGljZXMgdG8gY3JlYXRlIGFuIGVkZ2VcclxuXHRcdFx0XHR2YXIgaTIgPSAoaTEgKyAxKSAlIHBvbHlnb24ubGVuZ3RoO1xyXG5cdFx0XHRcdHZhciBwMSA9IHBvbHlnb25baTFdO1xyXG5cdFx0XHRcdHZhciBwMiA9IHBvbHlnb25baTJdO1xyXG5cclxuXHRcdFx0XHQvLyBmaW5kIHRoZSBsaW5lIHBlcnBlbmRpY3VsYXIgdG8gdGhpcyBlZGdlXHJcblx0XHRcdFx0dmFyIG5vcm1hbCA9IHsgeDogcDIueSAtIHAxLnksIHk6IHAxLnggLSBwMi54IH07XHJcblxyXG5cdFx0XHRcdG1pbkEgPSBtYXhBID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdC8vIGZvciBlYWNoIHZlcnRleCBpbiB0aGUgZmlyc3Qgc2hhcGUsIHByb2plY3QgaXQgb250byB0aGUgbGluZSBwZXJwZW5kaWN1bGFyIHRvIHRoZSBlZGdlXHJcblx0XHRcdFx0Ly8gYW5kIGtlZXAgdHJhY2sgb2YgdGhlIG1pbiBhbmQgbWF4IG9mIHRoZXNlIHZhbHVlc1xyXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBhLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0XHRwcm9qZWN0ZWQgPSBub3JtYWwueCAqIGFbal0ueCArIG5vcm1hbC55ICogYVtqXS55O1xyXG5cdFx0XHRcdFx0aWYgKG1pbkEgPT09IHVuZGVmaW5lZCB8fCBwcm9qZWN0ZWQgPCBtaW5BKSB7XHJcblx0XHRcdFx0XHRcdG1pbkEgPSBwcm9qZWN0ZWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAobWF4QSA9PT0gdW5kZWZpbmVkIHx8IHByb2plY3RlZCA+IG1heEEpIHtcclxuXHRcdFx0XHRcdFx0bWF4QSA9IHByb2plY3RlZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGZvciBlYWNoIHZlcnRleCBpbiB0aGUgc2Vjb25kIHNoYXBlLCBwcm9qZWN0IGl0IG9udG8gdGhlIGxpbmUgcGVycGVuZGljdWxhciB0byB0aGUgZWRnZVxyXG5cdFx0XHRcdC8vIGFuZCBrZWVwIHRyYWNrIG9mIHRoZSBtaW4gYW5kIG1heCBvZiB0aGVzZSB2YWx1ZXNcclxuXHRcdFx0XHRtaW5CID0gbWF4QiA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgYi5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0cHJvamVjdGVkID0gbm9ybWFsLnggKiBiW2pdLnggKyBub3JtYWwueSAqIGJbal0ueTtcclxuXHRcdFx0XHRcdGlmIChpc1VuZGVmaW5lZChtaW5CKSB8fCBwcm9qZWN0ZWQgPCBtaW5CKSB7XHJcblx0XHRcdFx0XHRcdG1pbkIgPSBwcm9qZWN0ZWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoaXNVbmRlZmluZWQobWF4QikgfHwgcHJvamVjdGVkID4gbWF4Qikge1xyXG5cdFx0XHRcdFx0XHRtYXhCID0gcHJvamVjdGVkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gaWYgdGhlcmUgaXMgbm8gb3ZlcmxhcCBiZXR3ZWVuIHRoZSBwcm9qZWN0cywgdGhlIGVkZ2Ugd2UgYXJlIGxvb2tpbmcgYXQgc2VwYXJhdGVzIHRoZSB0d29cclxuXHRcdFx0XHQvLyBwb2x5Z29ucywgYW5kIHdlIGtub3cgdGhlcmUgaXMgbm8gb3ZlcmxhcFxyXG5cdFx0XHRcdGlmIChtYXhBIDwgbWluQiB8fCBtYXhCIDwgbWluQSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9seWdvbjtcclxuIiwiaW1wb3J0IHsgQ29vcmRzIH0gZnJvbSAncm9ja2V0LWJvb3RzLWNvb3Jkcyc7XHJcblxyXG5mdW5jdGlvbiBwaHlzaWNzKG9iamVjdHMsIHQpIHtcclxuXHQvLyBMb29wIHRocm91Z2ggb2JqZWN0cywgYXBwbHkgZ3Jhdml0eVxyXG5cdG9iamVjdHMuZm9yRWFjaCgob2JqKSA9PiB7XHJcblx0XHRpZiAoIXBoeXNpY3MuaXNQaHlzaWNhbChvYmopKSB7IHJldHVybjsgfVxyXG5cdFx0aWYgKG9iai5jb2xsaWRlKSB7XHJcblx0XHRcdG9iai5jb2xsaWRlKG9iamVjdHMpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKG9iai5ncmF2aXRhdGUpIHtcclxuXHRcdFx0b2JqLmdyYXZpdGF0ZSh0LCBvYmplY3RzKTtcclxuXHRcdH1cclxuXHRcdGlmIChvYmoubW92ZSkge1xyXG5cdFx0XHRvYmoubW92ZSh0KTtcclxuXHRcdH1cclxuXHRcdC8vIG9iai55ICs9IDAuMDEgKiB0O1xyXG5cdH0pO1xyXG59XHJcblxyXG5waHlzaWNzLkNvb3JkcyA9IENvb3JkcztcclxucGh5c2ljcy5iaWdHID0gNS47XHJcbnBoeXNpY3MuY29sbGlkaW5nVmVsb2NpdHlNdWx0aXBsaWVyID0gMC45NTtcclxucGh5c2ljcy5jb2xsaWRlUHVzaGJhY2tNdWx0aXBsZXIgPSAwLjI7XHJcbnBoeXNpY3MuZWxhc3RpY2l0eSA9IDAuOTg7XHJcbnBoeXNpY3MuTUlOX0dSQVZJVFlfUkFESVVTID0gMS47XHJcblxyXG5mdW5jdGlvbiBuZXdYeSAoKSB7XHJcblx0cmV0dXJuIG5ldyBwaHlzaWNzLkNvb3JkcygpO1xyXG59XHJcblxyXG4vKipcclxuICogRGV0ZXJtaW5lIGlmIHRoZSBvYmplY3QgaXMgcGh5c2ljYWxcclxuICogQHBhcmFtIHtPYmplY3R9IG8gLSBvYmplY3RcclxuICovXHJcbnBoeXNpY3MuaXNQaHlzaWNhbCA9IChvKSA9PiB7XHJcblx0cmV0dXJuIG8ucG9zIGluc3RhbmNlb2YgcGh5c2ljcy5Db29yZHMgJiYgby52ZWwgaW5zdGFuY2VvZiBwaHlzaWNzLkNvb3JkcztcclxufVxyXG5cclxucGh5c2ljcy5nZXRPcmJpdGFsVmVsb2NpdHkgPSBmdW5jdGlvbiAoc21hbGxPYmplY3QsIGJpZ09iamVjdCwgbGVmdCA9IGZhbHNlLCBiaWdHID0gcGh5c2ljcy5iaWdHKSB7XHJcblx0Ly8gY29uc3QgbSA9IHNtYWxsT2JqZWN0Lm1hc3M7XHJcblx0Y29uc3QgTSA9IGJpZ09iamVjdC5tYXNzO1xyXG5cdGNvbnN0IHIgPSBzbWFsbE9iamVjdC5wb3MuZ2V0RGlzdGFuY2UoYmlnT2JqZWN0LnBvcyk7XHJcblx0Y29uc3Qgc3BlZWQgPSBNYXRoLnNxcnQoIGJpZ0cgKiBNIC8gciApO1xyXG5cdGNvbnN0IHVuaXQgPSBzbWFsbE9iamVjdC5wb3MuZ2V0VW5pdFZlY3RvcihiaWdPYmplY3QucG9zKTtcclxuXHRjb25zdCB2ID0gdW5pdC5nZXRQZXJwZW5kaWN1bGFyVmVjdG9yKGxlZnQpLm11bHRpcGx5KHNwZWVkKTtcclxuXHQvLyBjb25zb2xlLmxvZyhhcmd1bWVudHMsIE0sIHIsIHNwZWVkLCB1bml0LCB2KTtcclxuXHRyZXR1cm4gdjtcclxufTtcclxuXHJcbnBoeXNpY3MuY2FuQ29sbGlkZSA9IChvKSA9PiAoe1xyXG5cdGNvbGxpZGluZzogW10sXHJcblx0Y29sbGlkZURldGVjdChiKSB7XHJcblx0XHRjb25zdCBpbm5lclJhZGl1cyA9ICh0eXBlb2Ygby5pbm5lclJhZGl1cyA9PT0gJ251bWJlcicpID8gby5pbm5lclJhZGl1cyA6IDA7XHJcblx0XHRjb25zdCBpbm5lclJhZGl1c0IgPSAodHlwZW9mIGIuaW5uZXJSYWRpdXMgPT09ICdudW1iZXInKSA/IGIuaW5uZXJSYWRpdXMgOiAwO1xyXG5cdFx0Y29uc3QgciA9IG8ucG9zLmdldERpc3RhbmNlKGIucG9zKTtcclxuXHRcdGNvbnN0IGVkZ2VUb0VkZ2VEaXN0YW5jZSA9IHIgLSBpbm5lclJhZGl1cyAtIGlubmVyUmFkaXVzQjtcclxuXHRcdGNvbnN0IGlzQ29sbGlkaW5nID0gKGVkZ2VUb0VkZ2VEaXN0YW5jZSA+IDApID8gZmFsc2UgOiB0cnVlO1xyXG5cdFx0cmV0dXJuIHsgaXNDb2xsaWRpbmcsIGVkZ2VUb0VkZ2VEaXN0YW5jZSB9O1xyXG5cdH0sXHJcblx0Y29sbGlkZVB1c2hiYWNrKGIsIGVkZ2VUb0VkZ2VEaXN0YW5jZSwgcHVzaE11bHRpcGxpZXIgPSBwaHlzaWNzLmNvbGxpZGVQdXNoYmFja011bHRpcGxlcikge1xyXG5cdFx0Y29uc3QgcHVzaEFtb3VudCA9IGVkZ2VUb0VkZ2VEaXN0YW5jZSAqIHB1c2hNdWx0aXBsaWVyO1xyXG5cdFx0Y29uc3QgcHVzaGVyID0gKG8ubWFzcyA+IGIubWFzcykgPyBvIDogYjtcclxuXHRcdGNvbnN0IHB1c2hlZSA9IChwdXNoZXIgPT09IG8pID8gYiA6IG87XHJcblx0XHRjb25zdCBwdXNoID0gcHVzaGVlLnBvcy5nZXRVbml0VmVjdG9yKHB1c2hlci5wb3MpLm11bHRpcGx5KHB1c2hBbW91bnQpO1xyXG5cdFx0cHVzaGVlLnBvcy5hZGQocHVzaCk7XHJcblx0fSxcclxuXHRjb2xsaWRlQm91bmNlKG8yLCBlbGFzdGljaXR5ID0gcGh5c2ljcy5lbGFzdGljaXR5KSB7XHJcblx0XHQvLyBUaGFua3MgdG8gaHR0cDovL3d3dy5nYW1hc3V0cmEuY29tL3ZpZXcvZmVhdHVyZS8xMzE0MjQvcG9vbF9oYWxsX2xlc3NvbnNfZmFzdF9hY2N1cmF0ZV8ucGhwP3BhZ2U9M1xyXG5cdFx0dmFyIG8xID0gdGhpcztcclxuXHRcdGlmIChvMS5tYXNzIDw9IDAgfHwgbzIubWFzcyA8PSAwKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdC8vY29uc29sZS5sb2cobzEubmFtZSwgbzIubmFtZSk7XHJcblx0XHQvL2NvbnNvbGUubG9nKFwib3JpZ2luYWxcIiwgbzEudmVsLngsIG8xLnZlbC55LCBvMi52ZWwueCwgbzIudmVsLnkpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZyhcIm1vbWVudHVtIGJlZm9yZVwiLCAobzEubWFzcyAqIG8xLnZlbC5nZXRNYWduaXR1ZGUoKSkgKyAobzIubWFzcyAqIG8yLnZlbC5nZXRNYWduaXR1ZGUoKSkpO1xyXG5cdFx0dmFyIHAgPSAobzEubWFzcyAqIG8xLnZlbC5nZXRNYWduaXR1ZGUoKSkgKyAobzIubWFzcyAqIG8yLnZlbC5nZXRNYWduaXR1ZGUoKSk7XHJcblx0XHR2YXIgbiA9IG8xLnBvcy5nZXRVbml0VmVjdG9yKG8yLnBvcyk7XHJcblx0XHQvL2NvbnNvbGUubG9nKFwibiA9IFwiLCBuKTtcclxuXHRcdHZhciBhMSA9IG8xLnZlbC5nZXREb3Qobik7XHJcblx0XHR2YXIgYTIgPSBvMi52ZWwuZ2V0RG90KG4pO1xyXG5cdFx0dmFyIG9wdGltaXplZFAgPSAoMiAqIChhMSAtIGEyKSkgLyAobzEubWFzcyArIG8yLm1hc3MpO1xyXG5cdFx0bzEudmVsLmFkZCggbi5nZXRNdWx0aXBseSgtMSAqIG9wdGltaXplZFAgKiBvMi5tYXNzKSApO1xyXG5cdFx0bzEudmVsLm11bHRpcGx5KGVsYXN0aWNpdHkpO1xyXG5cdFx0bzIudmVsLmFkZCggbi5nZXRNdWx0aXBseShvcHRpbWl6ZWRQICogbzEubWFzcykgKTtcclxuXHRcdG8xLnZlbC5tdWx0aXBseShlbGFzdGljaXR5KTtcclxuXHRcdC8vdmFyIHBOZXcgPSAobzEubWFzcyAqIG8xLnZlbC5nZXRNYWduaXR1ZGUoKSkgKyAobzIubWFzcyAqIG8yLnZlbC5nZXRNYWduaXR1ZGUoKSk7XHJcblx0XHQvL2NvbnNvbGUubG9nKHBOZXcgLSBwKTtcclxuXHRcdC8vaWYgKHBOZXcgPiBwKSB7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhvMS5uYW1lLCBvMi5uYW1lLCBcInBOZXcgPiBwXCIsIHBOZXcsIHApO1xyXG5cdFx0Ly99ZWxzZSBjb25zb2xlLmxvZyhvMS5uYW1lLCBvMi5uYW1lLCBcInBOZXcgPD0gcFwiLCBwTmV3LCBwKTtcclxuXHRcdC8vY29uc29sZS5sb2coXCJhZnRlclwiLCBuZXdWMS54LCBuZXdWMS55LCBuZXdWMi54LCBuZXdWMi55KTtcclxuXHRcdC8vY29uc29sZS5sb2coXCJtb21lbnR1bSBhZnRlclwiLCAobzEubWFzcyAqIG8xLnZlbC5nZXRNYWduaXR1ZGUoKSkgKyAobzIubWFzcyAqIG8yLnZlbC5nZXRNYWduaXR1ZGUoKSkpO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSxcclxuXHRjb2xsaWRlRGFtYWdlKGIpIHtcclxuXHRcdGlmICghby5kYW1hZ2UpIHsgcmV0dXJuOyB9XHJcblx0XHRjb25zdCByZWxhdGl2ZVZlbG9jaXR5ID0gby52ZWwuY2xvbmUoKS5hZGQoYi52ZWwpO1xyXG5cdFx0Y29uc3QgdmVsb2NpdHlNYWcgPSByZWxhdGl2ZVZlbG9jaXR5LmdldE1hZ25pdHVkZSgpO1xyXG5cdFx0Ly8gKHRyaWFsIGFuZCBlcnJvciBkYW1hZ2UpXHJcblx0XHRjb25zdCB2ZWxvY2l0eURhbWFnZSA9ICh2ZWxvY2l0eU1hZyA8IDEpID8gMCA6IE1hdGguY2VpbChNYXRoLnBvdyh2ZWxvY2l0eU1hZywgMS40KSAvIDEwKTtcclxuXHRcdGlmICghdmVsb2NpdHlEYW1hZ2UpIHsgcmV0dXJuOyB9XHJcblx0XHRvLmRhbWFnZSh2ZWxvY2l0eURhbWFnZSwgYik7XHJcblx0fSxcclxuXHRjb2xsaWRlKG9ianMpIHtcclxuXHRcdG8uaXNDb2xsaWRpbmcgPSBmYWxzZTsgLy8gYXNzdW1lIG5vdCBjb2xsaWRpbmdcclxuXHRcdG8uY29sbGlkaW5nLmxlbmd0aCA9IDA7IC8vIENsZWFyIGxpc3Qgb2YgY29sbGlkaW5nIG9iamVjdHNcclxuXHRcdG9ianMuZm9yRWFjaCgoYikgPT4ge1xyXG5cdFx0XHRpZiAobyA9PT0gYiB8fCAhcGh5c2ljcy5pc1BoeXNpY2FsKGIpKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnN0IHsgaXNDb2xsaWRpbmcsIGVkZ2VUb0VkZ2VEaXN0YW5jZSB9ID0gby5jb2xsaWRlRGV0ZWN0KGIpXHJcblx0XHRcdGlmICghaXNDb2xsaWRpbmcpIHsgcmV0dXJuIGZhbHNlOyB9XHJcblx0XHRcdC8vIEtlZXAgdHJhY2sgb2YgY29sbGlkaW5nIG9iamVjdHNcclxuXHRcdFx0by5jb2xsaWRpbmcucHVzaChiKTtcclxuXHRcdFx0Ly8gUHVzaCBiYWNrIHRvIGF2b2lkIG92ZXJsYXBzXHJcblx0XHRcdG8uY29sbGlkZVB1c2hiYWNrKGIsIGVkZ2VUb0VkZ2VEaXN0YW5jZSk7XHJcblx0XHRcdC8vIEJvdW5jZVxyXG5cdFx0XHRvLmNvbGxpZGVCb3VuY2UoYik7XHJcblx0XHRcdC8vIERhbWFnZVxyXG5cdFx0XHRvLmNvbGxpZGVEYW1hZ2UoYik7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSk7XHJcblx0XHRvLmlzQ29sbGlkaW5nID0gby5jb2xsaWRpbmcubGVuZ3RoID4gMDtcclxuXHRcdGlmIChvLmlzQ29sbGlkaW5nKSB7XHJcblx0XHRcdG8udmVsLm11bHRpcGx5KHBoeXNpY3MuY29sbGlkaW5nVmVsb2NpdHlNdWx0aXBsaWVyKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxucGh5c2ljcy5jYW5Nb3ZlID0gKG8pID0+ICh7XHJcblx0bGFzdFBvczogbmV3WHkoKSxcclxuXHRwb3M6IG5ld1h5KCksXHJcblx0Zm9yY2U6IG5ld1h5KCksXHJcblx0YWNjOiBuZXdYeSgpLFxyXG5cdHZlbDogbmV3WHkoKSxcclxuXHRtb3ZlKHQpIHtcclxuXHRcdG8ubGFzdFBvcy5zZXQoby5wb3MpO1xyXG5cdFx0aWYgKG8ubWFzcyAhPT0gMCkge1xyXG5cdFx0XHRjb25zdCBmb3JjZUFjYyA9IG5ldyBwaHlzaWNzLkNvb3Jkcygoby5mb3JjZS54IC8gby5tYXNzKSwgKG8uZm9yY2UueSAvIG8ubWFzcykpO1xyXG5cdFx0XHRvLmFjYy5hZGQoZm9yY2VBY2MpO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgZGVsdGFWZWwgPSBvLmFjYy5nZXRNdWx0aXBseSh0KTsgLy8gbmV3IHBoeXNpY3MuQ29vcmRzKG8uYWNjLnggKiB0LCBvLmFjYy55ICogdCk7XHJcblx0XHRvLnZlbC5hZGQoZGVsdGFWZWwpO1xyXG5cdFx0Y29uc3QgZGVsdGFQb3MgPSBvLnZlbC5nZXRNdWx0aXBseSh0LzIpOyAvLyBuZXcgcGh5c2ljcy5Db29yZHMoby52ZWwueCAqIHQgLyAyLCBvLnZlbC55ICogdCAvIDIpO1xyXG5cdFx0by5wb3MuYWRkKGRlbHRhUG9zKTtcclxuXHRcdC8vIGNsZWFyIGJlY2F1c2Ugb25nb2luZyBmb3JjZXMgbmVlZCB0byBiZSByZS1hcHBsaWVkXHJcblx0XHRvLmZvcmNlLmNsZWFyKCk7XHJcblx0XHRvLmFjYy5jbGVhcigpO1xyXG5cdFx0Ly8gU3luYyBiYXNlIHgseSBpZiB0aGV5IGV4aXN0XHJcblx0XHQvLyBpZiAoby54ICE9PSB1bmRlZmluZWQpIHsgby54ID0gby5wb3MueDsgfVxyXG5cdFx0Ly8gaWYgKG8ueSAhPT0gdW5kZWZpbmVkKSB7IG8ueSA9IG8ucG9zLnk7IH1cclxuXHR9XHJcbn0pO1xyXG5cclxucGh5c2ljcy5jYW5HcmF2aXRhdGUgPSAobywgYmlnRyA9IHBoeXNpY3MuYmlnRykgPT4gKHtcclxuXHRncmF2aXRhdGUodCwgb2Jqcykge1xyXG5cdFx0aWYgKG8ubWFzcyA9PT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHRcdGNvbnN0IGJpZ0dNYXNzID0gYmlnRyAqIG8ubWFzcztcclxuXHRcdG9ianMuZm9yRWFjaCgoYikgPT4geyByZXR1cm4gby5ncmF2aXRhdGVPbmUoYiwgYmlnR01hc3MpOyB9KTtcclxuXHRcdC8vIG8uZm9yY2UuYWRkKG5ldyBwaHlzaWNzLkNvb3JkcygwLDAuMDAwMSkpO1xyXG5cdH0sXHJcblx0Z3Jhdml0YXRlT25lKGIsIGJpZ0dNYXNzKSB7IC8vIEFwcGx5IGZvcmNlIG9mIGdyYXZpdHkgZHVlIHRvIG9uZSBvYmplY3RcclxuXHRcdGlmIChcclxuXHRcdFx0YiA9PT0gbyAvLyBjYW4ndCBnZXQgZ3Jhdml0eSBmcm9tIHNlbGZcclxuXHRcdFx0fHwgYi5tYXNzID09PSAwIHx8IG8ubWFzcyA9PT0gMCAvLyB0aGluZ3Mgd2l0aG91dCBtYXNzIGRvbid0IG1ha2UgZ3Jhdml0eVxyXG5cdFx0XHR8fCBvLmlzQ29sbGlkaW5nIC8vIGNvbGxpc2lvbnMgY2FuY2VsIGdyYXZpdHkgd2l0aCBub3JtYWwgZm9yY2VcclxuXHRcdFx0fHwgIW8uZ3Jhdml0YXRlXHJcblx0XHRcdHx8ICFwaHlzaWNzLmlzUGh5c2ljYWwoYilcclxuXHRcdCkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRjb25zdCByID0gby5wb3MuZ2V0RGlzdGFuY2UoYi5wb3MpO1xyXG5cdFx0Ly8gTGFzdCByZXNvcnQgdG8gcHJldmVudCBibGFjayBob2xlcyBvciBzdXBlciBmbGluZ2luZ1xyXG5cdFx0aWYgKHIgPCBwaHlzaWNzLk1JTl9HUkFWSVRZX1JBRElVUykge1xyXG5cdFx0XHQvLyBvLnZlbC5tdWx0aXBseSgwLjIpO1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7IFxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0Ly8gRiA9IEcgKG0xIG0yKSAvIHJeMlxyXG5cdFx0Ly8gU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmV3dG9uJ3NfbGF3X29mX3VuaXZlcnNhbF9ncmF2aXRhdGlvbiNWZWN0b3JfZm9ybSAgICAgICAgICAgIFxyXG5cdFx0Ly9jb25zb2xlLmxvZyhcIkZvcmNlcyBvblwiLCB0aGlzLm5hbWUsIFwiIGR1ZSB0byBcIiwgYi5uYW1lKTtcclxuXHRcdGNvbnN0IHVuaXQgPSBvLnBvcy5nZXRVbml0VmVjdG9yKGIucG9zKTtcclxuXHRcdC8vY29uc29sZS5sb2coXCJ1bml0IHZlY3RvclwiLCBKU09OLnN0cmluZ2lmeShydikpO1xyXG5cdFx0XHJcblx0XHRjb25zdCByU3F1YXJlZCA9IE1hdGgucG93KHIsIDIpO1xyXG5cdFx0Y29uc3QgZm9yY2VNYWduaXR1ZGUgPSAoclNxdWFyZWQgPT0gMCkgPyAwIDogKChiaWdHTWFzcyAqIGIubWFzcykvclNxdWFyZWQpO1xyXG5cdFx0Y29uc3QgZm9yY2VPZkdyYXZpdHkgPSB1bml0LmdldE11bHRpcGx5KGZvcmNlTWFnbml0dWRlKTtcclxuXHRcdG8uZm9yY2UuYWRkKGZvcmNlT2ZHcmF2aXR5KTtcdFx0XHJcblx0XHQvLyBjb25zb2xlLmxvZyhvLm5hbWUsIG8ucG9zLCBiLnBvcywgclNxdWFyZWQsIGZvcmNlTWFnbml0dWRlKTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxufSk7XHJcblxyXG5waHlzaWNzLmNhblJvdGF0ZSA9IChvKSA9PiAoe1xyXG5cdC8vIGh0dHBzOi8vZ2FtZWRldmVsb3BtZW50LnR1dHNwbHVzLmNvbS90dXRvcmlhbHMvaG93LXRvLWNyZWF0ZS1hLWN1c3RvbS0yZC1waHlzaWNzLWVuZ2luZS1vcmllbnRlZC1yaWdpZC1ib2RpZXMtLWdhbWVkZXYtODAzMlxyXG5cdHJvdGF0aW9uOiAwLiwgLy8gYWthLiBvcmllbnRhdGlvblxyXG5cdHJvdFZlbDogMC4sIC8vIFwiz4lcIiAob21lZ2EpLCBha2EuIGFuZ3VsYXIgdmVsb2NpdHlcclxuXHR0b3JxdWU6IDAuLCAvLyBUID0gciDDlyDPiVxyXG5cdG1vbWVudE9mSW5lcnRpYTogMC4sIC8vIGRpZmZpY3VsdHkgb2Ygcm90YXRpbmdcclxuXHRpbnZlcnNlTW9tZW50T2ZJbmVydGlhOiAwLiwgXHJcblx0cm90YXRlKHQpIHtcclxuXHRcdG8ucm90YXRpb24gKz0gby5yb3RWZWwgKiB0O1xyXG5cdFx0Ly8gby5yb3RWZWwgPSAwLjtcclxuXHR9XHJcbn0pO1xyXG5cclxucGh5c2ljcy5waHlzaWNhbCA9IChvLCB7IG1hc3MgPSAxLCBiaWdHID0gcGh5c2ljcy5iaWdHIH0pID0+IHtcclxuXHRPYmplY3QuYXNzaWduKFxyXG5cdFx0byxcclxuXHRcdHtcclxuXHRcdFx0bWFzcyxcclxuXHRcdFx0Ly8gcG9zOiBuZXcgcGh5c2ljcy5Db29yZHMoKSxcclxuXHRcdFx0Ly8gZm9yY2U6IG5ldyBwaHlzaWNzLkNvb3JkcygpLFxyXG5cdFx0XHQvLyBhY2M6IG5ldyBwaHlzaWNzLkNvb3JkcygpLFxyXG5cdFx0XHQvLyB2ZWw6IG5ldyBwaHlzaWNzLkNvb3JkcygpLFxyXG5cdFx0XHQvLyBjb2xsaWRpbmc6IFtdLFxyXG5cdFx0fSxcclxuXHRcdHBoeXNpY3MuY2FuQ29sbGlkZShvKSxcclxuXHRcdHBoeXNpY3MuY2FuTW92ZShvKSxcclxuXHRcdHBoeXNpY3MuY2FuR3Jhdml0YXRlKG8sIGJpZ0cpLFxyXG5cdFx0cGh5c2ljcy5jYW5Sb3RhdGUobyksXHJcblx0KTtcclxuXHRyZXR1cm4gbztcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBoeXNpY3M7XHJcbiIsImltcG9ydCBQb2x5Z29uIGZyb20gJy4vUG9seWdvbi5qcyc7XHJcbmltcG9ydCBwaHlzaWNzIGZyb20gJy4uLy4uLy4uL3JvY2tldC1ib290cy1yZXBvcy9waHlzaWNzL3NyYy9waHlzaWNzLmpzJztcclxuaW1wb3J0IHsgQ29vcmRzIH0gZnJvbSAncm9ja2V0LWJvb3RzLWNvb3Jkcyc7XHJcblxyXG5waHlzaWNzLkNvb3JkcyA9IENvb3JkcztcclxucGh5c2ljcy5iaWdHID0gLjAwMDAwMTtcclxuXHJcbmNsYXNzIFNwYWNlT2JqZWN0IGV4dGVuZHMgUG9seWdvbiB7XHJcblx0Y29uc3RydWN0b3IoYmFzZVZlcnRzID0gW10pIHtcclxuXHRcdHN1cGVyKFtdKTtcclxuXHRcdGNvbnN0IGMgPSAoKSA9PiBNYXRoLnJhbmRvbSgpICogMC4yICsgMC40O1xyXG5cdFx0Y29uc3QgbyA9IHRoaXM7XHJcblx0XHRPYmplY3QuYXNzaWduKFxyXG5cdFx0XHRvLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YmFzZVZlcnRzLFxyXG5cdFx0XHRcdGJhc2VDb2xvcjogW1xyXG5cdFx0XHRcdFx0YygpLFxyXG5cdFx0XHRcdFx0YygpLFxyXG5cdFx0XHRcdFx0YygpLFxyXG5cdFx0XHRcdF0sXHJcblx0XHRcdFx0aGl0Q29sb3I6IFsuNywgMC4sIDAuXSxcclxuXHRcdFx0XHRib3VuZGluZ0JveDogW10sXHJcblx0XHRcdFx0aGl0OiBmYWxzZSxcclxuXHRcdFx0XHR2ZXJ0czogW10sIC8vIHNldCBpbiBjYWxjXHJcblx0XHRcdFx0dmM6IG51bGwsIC8vIHNldCBpbiBjYWxjXHJcblx0XHRcdFx0Ly8gUGh5c2ljcyByZWxhdGVkIHZhbHVlc1xyXG5cdFx0XHRcdC8vIHBvczogbmV3IENvb3JkcygpLFxyXG5cdFx0XHRcdC8vIGZvcmNlOiBuZXcgQ29vcmRzKCksXHJcblx0XHRcdFx0Ly8gYWNjOiBuZXcgQ29vcmRzKCksXHJcblx0XHRcdFx0Ly8gdmVsOiBuZXcgQ29vcmRzKCksXHJcblx0XHRcdFx0cjogMCxcclxuXHRcdFx0XHRpbm5lclJhZGl1czogMCxcclxuXHRcdFx0XHRjaGlsZHJlbjogW10sXHJcblx0XHRcdH1cclxuXHRcdCk7XHJcblx0XHRwaHlzaWNzLnBoeXNpY2FsKG8sIHsgbWFzczogMTAuIH0pO1xyXG5cdFx0by5hbGlnblRvQ2VudGVyKCk7XHJcblx0XHRvLmNhbGNSYWRpaSgpO1xyXG5cdFx0by5jYWxjVmVydHMoKTtcclxuXHRcdG8uY2FsY01hc3MoKTtcclxuXHR9XHJcblxyXG5cdGFsaWduVG9DZW50ZXIoKSB7XHJcblx0XHRjb25zdCBjZW50ZXIgPSBQb2x5Z29uLmdldENlbnRlcih0aGlzLmJhc2VWZXJ0cyk7XHJcblx0XHR0aGlzLmJhc2VWZXJ0cy5mb3JFYWNoKChidikgPT4ge1xyXG5cdFx0XHRbMCwxXS5mb3JFYWNoKGkgPT4gYnZbaV0gPSBidltpXSAtIGNlbnRlcltpXSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8vIGNhbGNSYWRpaSgpIHtcclxuXHQvLyBcdGNvbnN0IHsgaW5uZXIsIG91dGVyIH0gPSBQb2x5Z29uLmdldFJhZGlpKHRoaXMuYmFzZVZlcnRzKTtcclxuXHQvLyBcdHRoaXMuciA9IG91dGVyO1xyXG5cdC8vIFx0dGhpcy5pbm5lclJhZGl1cyA9IGlubmVyO1xyXG5cdC8vIH1cclxuXHJcblx0Y2FsY1JhZGlpKCkge1xyXG5cdFx0bGV0IGlubmVyID0gSW5maW5pdHk7XHJcblx0XHQvLyBPdXRlci9sYXJnZXN0IHJhZGl1c1xyXG5cdFx0dGhpcy5yID0gdGhpcy5iYXNlVmVydHMucmVkdWNlKChuLCB2KSA9PiB7XHJcblx0XHRcdC8vIFN0b3JlIHJhZGl1cyBvbiBlYWNoIGJhc2UgdmVydGV4IGZvciBxdWlja2VyIGNvbXB1dGF0aW9uIGxhdGVyXHJcblx0XHRcdGNvbnN0IHIgPSB2LnIgPSBQb2x5Z29uLmdldFJhZGl1cyh2KTtcclxuXHRcdFx0aWYgKHIgPCBpbm5lcikgeyBpbm5lciA9IHI7IH1cclxuXHRcdFx0cmV0dXJuIChyID4gbikgPyByIDogbjsgLy8gTG9vayBmb3IgdGhlIGxhcmdlc3RcclxuXHRcdH0sIDApO1xyXG5cdFx0dGhpcy5pbm5lclJhZGl1cyA9IGlubmVyO1xyXG5cdH1cclxuXHJcblx0Y2FsY01hc3MoKSB7XHJcblx0XHR0aGlzLm1hc3MgPSBNYXRoLlBJICogTWF0aC5wb3coKHRoaXMuaW5uZXJSYWRpdXMgKyB0aGlzLnIpIC8gMiwgMikgKiA1MDtcclxuXHRcdC8vIGNvbnNvbGUubG9nKCdtYXNzJywgdGhpcy5tYXNzKTtcclxuXHR9XHJcblxyXG5cdGdldFZlcnRDb2xvcnMoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy52YztcclxuXHR9XHJcblxyXG5cdGdldENvbG9yKCkge1xyXG5cdFx0Y29uc3QgYmMgPSB0aGlzLmJhc2VDb2xvcjtcclxuXHRcdHJldHVybiBbXHJcblx0XHRcdGJjWzBdICsgKHRoaXMuaGl0ID8gLjEgOiAwLiksXHJcblx0XHRcdGJjWzFdICsgKHRoaXMuaXNDb2xsaWRpbmcgPyAuMSA6IC4wKSxcclxuXHRcdFx0YmNbMl0sXHJcblx0XHRdO1xyXG5cdH1cclxuXHJcblx0Y2FsY1ZlcnRzKCkge1xyXG5cdFx0bGV0IHZjID0gW107XHJcblx0XHR0aGlzLnZlcnRzLmxlbmd0aCA9IDA7XHJcblx0XHR0aGlzLmJhc2VWZXJ0cy5mb3JFYWNoKChidiwgaSkgPT4ge1xyXG5cdFx0XHR0aGlzLnZlcnRzW2ldID0gW2J2WzBdICsgdGhpcy5wb3MueCwgYnZbMV0gKyB0aGlzLnBvcy55LCAwXTsgLy8gYnZbMl0gKyB0aGlzLnBvcy56XTtcclxuXHRcdFx0dmMgPSB2Yy5jb25jYXQodGhpcy52ZXJ0c1tpXSkuY29uY2F0KHRoaXMuZ2V0Q29sb3IoKSk7XHJcblx0XHR9KTtcclxuXHRcdHRoaXMudmMgPSBuZXcgRmxvYXQzMkFycmF5KHZjKTtcclxuXHR9XHJcblxyXG5cdGNhbGNWZXJ0V2l0aFJvdGF0aW9uKHZjLCBidiwgaSkge1xyXG5cdFx0Ly8gVGhhbmtzIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNzQxMTI3Ni8xNzY2MjMwXHJcblx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcyh0aGlzLnJvdGF0aW9uKTtcclxuXHRcdGNvbnN0IHNpbiA9IE1hdGguc2luKHRoaXMucm90YXRpb24pO1xyXG5cdFx0dGhpcy52ZXJ0c1tpXSA9IFtcclxuXHRcdFx0KGNvcyAqIGJ2WzBdKSAtIChzaW4gKiBidlsxXSkgKyB0aGlzLnBvcy54LCBcclxuXHRcdFx0KGNvcyAqIGJ2WzFdKSArIChzaW4gKiBidlswXSkgKyB0aGlzLnBvcy55LFxyXG5cdFx0XHQwLFxyXG5cdFx0XTtcclxuXHRcdHJldHVybiB2Yy5jb25jYXQodGhpcy52ZXJ0c1tpXSkuY29uY2F0KHRoaXMuZ2V0Q29sb3IoKSk7XHJcblx0fVxyXG5cclxuXHRjYWxjVmVydHNXaXRoUm90YXRpb24oKSB7XHJcblx0XHR0aGlzLnZlcnRzLmxlbmd0aCA9IDA7XHJcblx0XHRsZXQgdmMgPSB0aGlzLmJhc2VWZXJ0cy5yZWR1Y2UoKHZjLCBidiwgaSkgPT4gdGhpcy5jYWxjVmVydFdpdGhSb3RhdGlvbih2YywgYnYsIGkpLCBbXSk7XHJcblx0XHR0aGlzLnZjID0gbmV3IEZsb2F0MzJBcnJheSh2Yyk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcm90YXRlKHh5LCByYWRpYW5zLCBjZW50ZXIpIHtcclxuXHRcdGxldCB4ID0geHlbMF0gLSBjZW50ZXJbMF07XHJcblx0XHR4ICs9IGNlbnRlclswXTtcclxuXHR9XHJcblxyXG5cdGNsZWFySGl0KCkge1xyXG5cdFx0dGhpcy5oaXQgPSBmYWxzZTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0Y2hlY2tIaXRzKG9iamVjdHMpIHtcclxuXHRcdG9iamVjdHMuZm9yRWFjaCgoYikgPT4gdGhpcy5jaGVja0hpdChiKSk7XHJcblx0fVxyXG5cclxuXHRjaGVja0hpdChvYmopIHtcclxuXHRcdGlmIChvYmogPT09IHRoaXMpIHsgcmV0dXJuOyB9XHJcblx0XHRpZiAodGhpcy5vYmplY3RJbnNpZGUob2JqKSkge1xyXG5cdFx0XHR0aGlzLmhpdCA9IHRydWU7XHJcblx0XHR9XHRcdFxyXG5cdH1cclxuXHJcblx0c2V0T3JiaXRhbFZlbG9jaXR5KGJpZ09iaikge1xyXG5cdFx0dGhpcy52ZWwuc2V0KHBoeXNpY3MuZ2V0T3JiaXRhbFZlbG9jaXR5KHRoaXMsIGJpZ09iaikpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3BhY2VPYmplY3Q7XHJcbiIsImltcG9ydCBTcGFjZU9iamVjdCBmcm9tICcuL1NwYWNlT2JqZWN0LmpzJztcclxuaW1wb3J0IHsgQ29vcmRzIH0gZnJvbSAncm9ja2V0LWJvb3RzLWNvb3Jkcyc7XHJcblxyXG5jb25zdCBPTkVfTU9NRU5UID0gMC4wMjsgLy8gdHlwaWNhbCB0aW1lIFwidFwiIGZvciB0aHJ1c3RcclxuY29uc3QgU0hJUF9CQVNFX1ZFUlRTID0gW1xyXG5cdFsuMjAsIC0uMSwgMF0sIC8vIGJvdHRvbSBjZW50ZXJcclxuXHRbLjM1LCAwLCAwXSwgLy8gcmlnaHQgYnV0dFxyXG5cdFsuNDUsIC4xMCwgMF0sXHJcblx0Wy40MCwgLjMwLCAwXSxcclxuXHRbLjMwLCAuNDAsIDBdLFxyXG5cdFsuMjAsIC44LCAwXSwgLy8gcG9pbnRcclxuXHRbLjEwLCAuNDAsIDBdLFxyXG5cdFswLCAuMzAsIDBdLFxyXG5cdFstLjA1LCAuMTAsIDBdLFxyXG5cdFsuMDUsIDAsIDBdLCAvLyBsZWZ0IGJ1dHRcclxuXTtcclxuY29uc3QgU0hJUF9TQ0FMRSA9IDEuNTtcclxuY29uc3QgU0hJUF9ERU5TSVRZID0gMztcclxuY29uc3QgU0hJUF9USFJVU1QgPSAxMDA7XHJcblxyXG5jbGFzcyBTaGlwIGV4dGVuZHMgU3BhY2VPYmplY3Qge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0c3VwZXIoU0hJUF9CQVNFX1ZFUlRTLm1hcCgodikgPT4gdi5tYXAoKGNvb3JkKSA9PiBjb29yZCAqIFNISVBfU0NBTEUpKSk7XHJcblx0XHRPYmplY3QuYXNzaWduKFxyXG5cdFx0XHR0aGlzLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2hpcFNjYWxlOiBTSElQX1NDQUxFLCAvLyBmb3IgcmVmZXJlbmNlIG9ubHlcclxuXHRcdFx0XHRlbmdhZ2VkOiBmYWxzZSwgLy8gQXJlIGVuZ2luZXMgb24/XHJcblx0XHRcdFx0ZmFjaW5nUm90YXRpb25PZmZzZXQ6IC1NYXRoLlBJLzIsXHJcblx0XHRcdFx0dGhydXN0UG93ZXJVcE1heDogMixcclxuXHRcdFx0XHR0aHJ1c3RQb3dlclVwU3RhcnQ6IDAuNzUsXHJcblx0XHRcdFx0dGhydXN0UG93ZXJVcDogMC43NSxcclxuXHRcdFx0XHR0aHJ1c3RQb3dlclVwTXVsdGlwbGllcjogLjUsXHJcblx0XHRcdFx0dGhydXN0UG93ZXJEb3duTXVsdGlwbGllcjogMi4sXHJcblx0XHRcdFx0XHJcblx0XHRcdH1cclxuXHRcdCk7XHJcblx0XHR0aGlzLm1hc3MgKj0gU0hJUF9ERU5TSVRZO1xyXG5cdFx0dGhpcy50aHJ1c3RNYWduaXR1ZGUgPSBTSElQX1RIUlVTVCAqIHRoaXMubWFzcztcclxuXHR9XHJcblxyXG5cdHNldFJvdGF0aW9uKHJvdCkge1xyXG5cdFx0dGhpcy5yb3RhdGlvbiA9IHJvdCArIHRoaXMuZmFjaW5nUm90YXRpb25PZmZzZXQ7XHJcblx0fVxyXG5cclxuXHRnZXRGYWNpbmdVbml0VmVjdG9yKCkge1xyXG5cdFx0Y29uc3Qgcm90ID0gdGhpcy5yb3RhdGlvbiArIHRoaXMuZmFjaW5nUm90YXRpb25PZmZzZXQ7XHJcblx0XHRjb25zdCB4ID0gTWF0aC5jb3Mocm90KTtcclxuXHRcdGNvbnN0IHkgPSBNYXRoLnNpbihyb3QpO1xyXG5cdFx0cmV0dXJuIG5ldyBDb29yZHMoeCwgeSk7XHJcblx0fVxyXG5cclxuXHRvbmdvaW5nKHQpIHtcclxuXHRcdGlmICh0aGlzLmVuZ2FnZWQpIHsgdGhpcy50aHJ1c3QodCk7IH1cclxuXHRcdGVsc2UgeyB0aGlzLmNvb2xkb3duVGhydXN0KHQpOyB9XHJcblx0fVxyXG5cclxuXHRlbmdhZ2UoKSB7XHJcblx0XHR0aGlzLmVuZ2FnZWQgPSB0cnVlO1xyXG5cdFx0dGhpcy50aHJ1c3QoT05FX01PTUVOVCk7XHJcblx0fVxyXG5cclxuXHRkaXNlbmdhZ2UoKSB7XHJcblx0XHR0aGlzLmVuZ2FnZWQgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdHRocnVzdCh0KSB7XHJcblx0XHRjb25zdCBpID0gdGhpcy50aHJ1c3RQb3dlclVwO1xyXG5cdFx0dGhpcy50aHJ1c3RQb3dlclVwICs9IHQgKiB0aGlzLnRocnVzdFBvd2VyVXBNdWx0aXBsaWVyO1xyXG5cdFx0dGhpcy50aHJ1c3RQb3dlclVwID0gTWF0aC5taW4odGhpcy50aHJ1c3RQb3dlclVwTWF4LCB0aGlzLnRocnVzdFBvd2VyVXApO1xyXG5cdFx0Ly8gY29uc29sZS5sb2coaSwgJy0tPicsIHRoaXMudGhydXN0UG93ZXJVcCwgdCk7XHJcblx0XHRjb25zdCB1bml0ID0gdGhpcy5nZXRGYWNpbmdVbml0VmVjdG9yKCk7XHJcblx0XHRjb25zdCB0aHJ1c3RGb3JjZSA9IHVuaXQuZ2V0TXVsdGlwbHkodCAqIC10aGlzLnRocnVzdE1hZ25pdHVkZSAqIHRoaXMudGhydXN0UG93ZXJVcCk7XHJcblx0XHR0aGlzLmZvcmNlLmFkZCh0aHJ1c3RGb3JjZSk7XHJcblx0fVxyXG5cclxuXHRjb29sZG93blRocnVzdCh0KSB7XHJcblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLnRocnVzdFBvd2VyVXApO1xyXG5cdFx0aWYgKHRoaXMudGhydXN0UG93ZXJVcCA8PSB0aGlzLnRocnVzdFBvd2VyVXBTdGFydCkgeyByZXR1cm47IH1cclxuXHRcdHRoaXMudGhydXN0UG93ZXJVcCAtPSB0ICogdGhpcy50aHJ1c3RQb3dlckRvd25NdWx0aXBsaWVyO1xyXG5cdFx0dGhpcy50aHJ1c3RQb3dlclVwID0gTWF0aC5tYXgodGhpcy50aHJ1c3RQb3dlclVwU3RhcnQsIHRoaXMudGhydXN0UG93ZXJVcCk7XHJcblx0fVxyXG5cclxuXHRmaXJlKCkge1xyXG5cdFx0cmV0dXJuIDIyICsgTWF0aC5yYW5kb20oKSAqIDI7XHJcblx0fVxyXG5cclxuXHQvLyBnZXRWZXJ0Q29sb3JzKCkge1xyXG5cdC8vIFx0Y29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuXHQvLyBcdFx0Ly8geCxcdHksXHRcdHosXHRcdHIsXHRnLFx0YlxyXG5cdC8vIFx0XHQvLyAwLCAgICBcdC4yLCBcdDAsIFx0XHQwLiwgMC4sIDEuLCAvLyBwb2ludCAxXHJcblx0Ly8gXHRcdC8vIC4yLFx0IFx0MCwgXHRcdDAsIFx0XHQwLiwgMS4sIDAuLCAvLyBwb2ludCAyXHJcblx0Ly8gXHRcdC8vIC42LCBcdDAsXHQgXHQwLCBcdFx0MS4sIDAuLCAwLiwgIC8vIHBvaW50IDNcclxuXHQvLyBcdFx0Ly8gMC4xLCBcdC0xLCBcdDAsIFx0XHQxLiwgMS4sIDAuLFxyXG5cclxuXHRcclxuXHQvLyBcdFx0MCwgLjEwLCAwLCAwLCAuNSwgMSxcclxuXHQvLyBcdFx0LjEwLCAwLCAwLCAwLCAuNSwgMSxcclxuXHQvLyBcdFx0LjMwLCAwLCAwLCAwLCAuNSwgMSxcclxuXHQvLyBcdFx0LjQwLCAuMTAsIDAsIDEsIC41LCAxLFxyXG5cdC8vIFx0XHQuNDAsIC4zMCwgMCwgMSwgLjUsIDEsXHJcblx0Ly8gXHRcdC4zMCwgLjQwLCAwLCAwLCAuNSwgMSxcclxuXHQvLyBcdFx0LjEwLCAuNDAsIDAsIDAsIC41LCAxLFxyXG5cdC8vIFx0XHQwLCAuMzAsIDAsIDEsIC41LCAxLFxyXG5cclxuXHQvLyBcdF0pO1xyXG5cdC8vIFx0cmV0dXJuIHZlcnRpY2VzO1xyXG5cdC8vIH1cclxuXHJcblx0Ly8gc3RhdGljIGdldFRyaWFuZ2xlKCkge1xyXG5cdC8vIFx0Y29uc3QgYXJyID0gW107XHJcblx0Ly8gXHQvLyBbXHJcblx0Ly8gXHQvLyBcdC8vIHgsXHR5LFx0XHR6LFx0XHRyLFx0ZyxcdGJcclxuXHQvLyBcdC8vIFx0LS4xLCAgICBcdDAsIFx0MCwgXHRcdDAuLCAwLiwgMS4sIC8vIHBvaW50IDFcclxuXHQvLyBcdC8vIFx0MCxcdCBcdC4yLCBcdFx0MCwgXHRcdDAuLCAxLiwgMC4sIC8vIHBvaW50IDJcclxuXHQvLyBcdC8vIFx0LjEsIFx0MCxcdCBcdDAsIFx0XHQxLiwgMC4sIDAuLCAgLy8gcG9pbnQgM1xyXG5cdC8vIFx0Ly8gXVxyXG5cdC8vIFx0Zm9yKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xyXG5cdC8vIFx0XHRhcnIucHVzaCgoTWF0aC5yYW5kb20oKSAqIC4yKSAtIC4xKTtcclxuXHQvLyBcdFx0YXJyLnB1c2goKE1hdGgucmFuZG9tKCkgKiAuMikgLSAuMSk7XHJcblx0Ly8gXHRcdGFyci5wdXNoKChNYXRoLnJhbmRvbSgpICogLjIpIC0gLjEpO1xyXG5cdC8vIFx0XHRhcnIucHVzaCgoTWF0aC5yYW5kb20oKSAqIDIpIC0gMSk7XHJcblx0Ly8gXHRcdGFyci5wdXNoKChNYXRoLnJhbmRvbSgpICogMikgLSAxKTtcclxuXHQvLyBcdFx0YXJyLnB1c2goKE1hdGgucmFuZG9tKCkgKiAyKSAtIDEpO1xyXG5cdC8vIFx0fVxyXG5cdC8vIFx0cmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoYXJyKTtcclxuXHQvLyB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNoaXA7XHJcbiIsImltcG9ydCBTcGFjZU9iamVjdCBmcm9tICcuL1NwYWNlT2JqZWN0LmpzJztcclxuXHJcbmNvbnN0IHJhbmRvbVZlcnROdW0gPSAoKSA9PiAzICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNyk7XHJcbmNvbnN0IHJhbmRvbVJhZGl1cyA9ICgpID0+IDEuNSArIE1hdGgucmFuZG9tKCkgKiAuNSAtIE1hdGgucmFuZG9tKCkgKiAuNTtcclxuXHJcbmNsYXNzIEFzdGVyb2lkIGV4dGVuZHMgU3BhY2VPYmplY3Qge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0Y29uc3QgYmFzZVZlcnRzID0gU3BhY2VPYmplY3QuZ2V0UmVndWxhclBvbHlnb25WZXJ0cyhyYW5kb21WZXJ0TnVtKCksIHJhbmRvbVJhZGl1cygpKTtcclxuXHRcdHN1cGVyKGJhc2VWZXJ0cyk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBc3Rlcm9pZDtcclxuIiwiLy8gQmFzZWQgb24gaHR0cHM6Ly94ZW0uZ2l0aHViLmlvL2FydGljbGVzL3dlYmdsLWd1aWRlLmh0bWxcclxuXHJcbi8qKiBTVFYgPSBTY3JlZW4gVHJpYW5nbGUgVmVydGljZXMgKi9cclxuY29uc3QgU1RWID0gbmV3IEZsb2F0MzJBcnJheShbXHJcblx0LTEsIC0xLCAvLyBmaXJzdCB0cmlhbmdsZVxyXG5cdDEsIC0xLFxyXG5cdC0xLCAxLFxyXG5cdC0xLCAxLCAvLyBzZWNvbmQgdHJpYW5nbGVcclxuXHQxLCAtMSxcclxuXHQxLCAxLFxyXG5dKTtcclxuLyoqIFNjcmVlbiBUcmlhbmdsZXMgTnVtYmVycyBwZXIgdmVydGV4ICovXHJcbmNvbnN0IFNUTlBWID0gMjtcclxuXHJcbmNvbnN0IGxvZyA9ICguLi5hcmdzKSA9PiBjb25zb2xlLmxvZyguLi5hcmdzKTtcclxuXHJcbi8qKiBHcmFwaGljIExhbmd1YWdlIFByb2dyYW0gY2xhc3MgKi9cclxuY2xhc3MgR2xwIHtcclxuXHQvKipcclxuXHQgKiBHbHAgY29uc3RydWN0b3IgbWV0aG9kXHJcblx0ICogQHBhcmFtIHtPYmplY3R9IGdsIC0gd2ViR0wgb2JqZWN0XHJcblx0ICogQHBhcmFtIHtPYmplY3RbXX0gcCAtIGFycmF5IG9mIHdlYkdMIHByb2dyYW0gb2JqZWN0c1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGdsLCBwKSB7XHJcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcclxuXHRcdFx0Z2wsIC8vIHdlYmdsIHJlbmRlcmluZyBjb250ZXh0IG9iamVjdFxyXG5cdFx0XHRwLCAvLyBhcnJheSBvZiBwcm9ncmFtc1xyXG5cdFx0XHRpOiAwLCAvLyBjdXJyZW50IHByb2dyYW1cclxuXHRcdFx0Ly8gdmFyaWFibGVzIC0gaW50ZXJuYWwgc3RvcmFnZSBvZiBhdHRyaWJ1dGVzIGFuZCB1bmlmb3Jtc1xyXG5cdFx0XHQvLyBpbiBhIHBlci1wcm9ncmFtIGFycmF5XHJcblx0XHRcdGFWOiBwLm1hcCgoKT0+KHt9KSksXHJcblx0XHRcdHVWOiBwLm1hcCgoKT0+KHt9KSksXHJcblx0XHR9KTtcclxuXHR9XHJcblx0LyoqXHJcblx0ICogVXNlIGEgcHJvZ3JhbVxyXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpIC0gaW5kZXggb2YgcHJvZ3JhbVxyXG5cdCAqL1xyXG5cdHVzZShpKSB7XHJcblx0XHR0aGlzLmkgPSBpO1xyXG5cdFx0dGhpcy5nbC51c2VQcm9ncmFtKHRoaXMucFtpXSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0Ly8gY3AoKSB7IC8vIGN1cnJlbnQgcHJvZ3JhbVxyXG5cdC8vIFx0cmV0dXJuIHRoaXMucFt0aGlzLmldO1xyXG5cdC8vIH1cclxuXHQvKipcclxuXHQgKiBHZW5lcmljIHNldHRpbmcgZnVuY3Rpb25cclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdiAtIHZhcmlhYmxlIHN0b3JhZ2UgcHJvcGVydHlcclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZyAtIGdldCBsb2NhdGlvbiBHTCBmdW5jdGlvbiBuYW1lXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IGYgLSBzZXQgR0wgZnVuY3Rpb25cclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbiAtIG5hbWVcclxuXHQgKiBAcGFyYW0geyp9IGEgLSBhcmd1bWVudHNcclxuXHQgKi9cclxuXHR2KHYsIGcsIGYsIG4sIGEpIHtcclxuXHRcdGNvbnN0IG8gPSB0aGlzO1xyXG5cdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB2YWx1ZSBleGlzdHMgaW4gc3RvcmFnZSBhbHJlYWR5XHJcblx0XHQvLyAuLi5pZiBub3QgdGhlbiBnZXQgbG9jYXRpb24gZnJvbSBnbCB3aXRoIGdldEF0dHJpYkxvY2F0aW9uIG9yIGdldFVuaWZvcm1Mb2NhdGlvbiBtZXRob2RcclxuXHRcdGNvbnN0IGQgPSBvW3ZdW28uaV1bbl0gfHwgby5nbFtnXShvLnBbby5pXSwgbik7IC8vIGdldCBmcm9tIHN0b3JhZ2Ugb3IgZ2V0IGxvY2F0aW9uIGZyb20gR0xcclxuXHRcdC8vIFNldCB0aGUgdmFsdWUgYmFzZWQgb24gdGhlIG5hbWUgKHUpIGFuZCB0aGUgYXJndW1lbnRzIChhKSwgdXNpbmcgdGhlIGdsIG1ldGhvZFxyXG5cdFx0Ly8gZS5nLiwgdmVydGV4QXR0cmliWGYgb3IgdW5pZm9ybVhmLCB3aGVyZSBYIGlzIHRoZSBsZW5ndGggb2YgdGhlIGFyZ3VtZW50c1xyXG5cdFx0by5nbFtgJHtmfSR7YS5sZW5ndGh9ZmBdKGQsIC4uLmEpO1xyXG5cdFx0Ly8gU3RvcmUgbG9jYXRpb24gaWQgdmFsdWVzIGludG8gdGhpcyBvYmplY3QgYW5kIHJldHVybiB0aGVtXHJcblx0XHRyZXR1cm4gb1t2XVt0aGlzLmldW25dID0gZDtcclxuXHR9XHJcblx0LyoqXHJcblx0ICogU2V0IGFuIGF0dHJpYnV0ZSB2YWx1ZVxyXG5cdCAqIEFuIGF0dHJpYnV0ZSBpcyB2YXJpYWJsZSBhbmQgY2FuIGNvbnRhaW4gYSBmbG9hdCBvciBhIHZlY3RvciAodmVjMiwgdmVjMywgdmVjNCkuXHJcblx0ICogWW91ciBwcm9ncmFtIHNob3VsZCBub3QgZXhjZWVkIDE2IGF0dHJpYnV0ZXMgdG8gd29yayBvbiBhbGwgZGV2aWNlcy5cclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcclxuXHQgKiBAcGFyYW0gIHsuLi5hbnl9IGFyZ3MgXHJcblx0ICovXHJcblx0YXR0cihuYW1lLCAuLi5hcmdzKSB7XHJcblx0XHRyZXR1cm4gdGhpcy52KCdhVicsICdnZXRBdHRyaWJMb2NhdGlvbicsICd2ZXJ0ZXhBdHRyaWInLCBuYW1lLCBhcmdzKTtcclxuXHR9XHJcblx0LyoqXHJcblx0ICogU2V0IGEgdW5pZm9ybSB2YWx1ZVxyXG5cdCAqIEEgdW5pZm9ybSBpcyBjb25zdGFudCBjYW4gY29udGFpbiBhbiBpbnQsIGEgZmxvYXQsIGEgdmVjdG9yIG9yIGEgbWF0cml4IChtYXQyLCBtYXQzLCBtYXQ0KS5cclxuXHQgKiBZb3VyIHByb2dyYW0gc2hvdWxkIG5vdCBleGNlZWQgMTI4IHZlcnRleCB1bmlmb3JtcyBhbmQgNjQgZnJhZ21lbnQgdW5pZm9ybXMuXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSB0aGUgbmFtZSAoYWthLiBsb2NhdGlvbikgb2YgdGhlIHVuaWZvcm1cclxuXHQgKiBAcGFyYW0gey4uLmFueX0gYXJncyAtIHNvbWUgbnVtYmVyIG9mIGFyZ3VtZW50c1xyXG5cdCAqLyBcclxuXHR1bmlmKG5hbWUsIC4uLmFyZ3MpIHtcclxuXHRcdHJldHVybiB0aGlzLnYoJ3VWJywgJ2dldFVuaWZvcm1Mb2NhdGlvbicsICd1bmlmb3JtJywgbmFtZSwgYXJncyk7XHJcblx0fVxyXG5cdC8qKiBTZXQgVW5pZm9ybXMgZnJvbSBhbiBhcnJheSAqL1xyXG5cdHVhKGEpIHtcclxuXHRcdGEuZm9yRWFjaCh1ID0+IHRoaXMudW5pZiguLi51KSk7XHJcblx0fVxyXG5cdC8qKiBTZXQgYnVmZmVyIGF0dHJpYnV0ZSAqL1xyXG5cdGJ1ZmYoXHJcblx0XHRhdHRyLFxyXG5cdFx0ZGF0YSxcclxuXHRcdHtcclxuXHRcdFx0c2l6ZSA9IFNUTlBWLCAvLyAjIG9mIGNvbXBvbmVudHMgcGVyIGl0ZXJhdGlvblxyXG5cdFx0XHR0eXBlID0gdGhpcy5nbC5GTE9BVCwgLy8gd2hhdCB0eXBlIGlzIHRoZSBkYXRhP1xyXG5cdFx0XHRub3JtID0gZmFsc2UsIC8vIGRvbid0IG5vcm1hbGl6ZSB0aGUgZGF0YVxyXG5cdFx0XHRzdHJpZGUgPSAwLCAvLyBvZmZzZXQgaW4gYnl0ZXMgKDAgPSBtb3ZlIGZvcndhcmQgc2l6ZSAqIHNpemVvZih0eXBlKSBlYWNoIGl0ZXJhdGlvbiB0byBnZXQgdGhlIG5leHQgcG9zaXRpb24pXHJcblx0XHRcdG9mZnNldCA9IDAsIC8vIHN0YXJ0IGF0IGJlZ2lubmluZyBvZiBidWZmZXJcclxuXHRcdH0gPSB7fVxyXG5cdCkge1xyXG5cdFx0Y29uc3Qge2dsLHB9ID0gdGhpcztcclxuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBnbC5jcmVhdGVCdWZmZXIoKSk7XHJcblx0XHRnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgZGF0YSwgZ2wuU1RBVElDX0RSQVcpO1xyXG5cdFx0Ly8gVE9ETzogVGhlcmUgbWlnaHQgYmUgc29tZSBlZmZpY2llbmNpZXMgdG8gYmUgZ2FpbmVkIGJ5IG5vdCBkb2luZyBeIHRoZSBhYm92ZVxyXG5cdFx0Ly8gbXVsdGlwbGUgdGltZXMgZm9yIG11bHRpcGxlIChpbnRlcmxlYXZlZCkgYnVmZmVyc1xyXG5cclxuXHRcdC8vIE5lZWQgdG8ga25vdyBob3cgYmlnIGVhY2ggaXRlbSBpcyBpbiB0aGUgZGF0YVxyXG5cdFx0Y29uc3Qgc3ogPSBkYXRhLkJZVEVTX1BFUl9FTEVNRU5UO1xyXG5cdFx0Ly8gR2V0IHRoZSBwb3NpdGlvbiBhdHRyaWJ1dGUgbG9jYXRpb24gKGFuIGlkKVxyXG5cdFx0Y29uc3QgaWQgPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwW3RoaXMuaV0sIGF0dHIpO1xyXG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC92ZXJ0ZXhBdHRyaWJQb2ludGVyXHJcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGlkLFx0c2l6ZSwgdHlwZSxcdG5vcm0sIHN0cmlkZSAqIHN6LCBvZmZzZXQgKiBzeik7XHJcblx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShpZCk7XHJcblx0XHRyZXR1cm4gaWQ7XHJcblx0fVxyXG5cdC8qKiBTZXQgYnVmZmVycyBmcm9tIGFuIGFycmF5ICovXHJcblx0YmEoZGF0YSwgYSkge1xyXG5cdFx0YS5mb3JFYWNoKGIgPT4gdGhpcy5idWZmKGJbMF0sIGRhdGEsIGJbMV0pKTtcclxuXHR9XHJcblx0LyoqIENsZWFyIHRoZSBHTCBjb250ZXh0ICovXHJcblx0Y2xlYXIoKSB7XHJcblx0XHR0aGlzLmdsLmNsZWFyQ29sb3IoMC4sIDAuLCAwLiwgMS4pOyAvLyBTZXQgdGhlIGNsZWFyIGNvbG9yIChibGFjaylcclxuXHRcdC8vIHRoaXMuZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpOyAvLyBDbGVhciB0aGUgY2FudmFzIEFORCB0aGUgZGVwdGggYnVmZmVyLlxyXG5cdFx0dGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQpO1xyXG5cdH1cclxuXHQvKiogRHJhdy9yZW5kZXIgdG8gdGhlIEdMIGNvbnRlbnQgLS0gdmVydFNpemUgPSBob3cgbWFueSBudW1iZXJzIHBlciB2ZXJ0ZXggKi9cclxuXHRkcmF3KHtcclxuXHRcdHVuaWZvcm1zID0gW10sXHJcblx0XHRpID0gdGhpcy5pLFxyXG5cdFx0YnVmZnMgPSBbXSxcclxuXHRcdHZlcnRzID0gU1RWLFxyXG5cdFx0dmVydFNpemUgPSBTVE5QVixcclxuXHRcdHZlcnRzVG9EcmF3LFxyXG5cdFx0dHlwZSA9IHRoaXMuZ2wuVFJJQU5HTEVTLFxyXG5cdFx0Y2xlYXIgPSB0cnVlLFxyXG5cdH0pIHtcclxuXHRcdGNvbnN0IG8gPSB0aGlzO1xyXG5cdFx0by51c2UoaSk7IC8vIHVzZSBwcm9ncmFtXHJcblx0XHRvLnVhKHVuaWZvcm1zKTsgLy8gc2V0IHVuaWZvcm1zXHJcblx0XHRvLmJhKHZlcnRzLCBidWZmcyk7IC8vIHNldCBidWZmZXJzXHJcblx0XHRpZiAoY2xlYXIpIHsgby5jbGVhcigpOyB9XHJcblx0XHQvLyBDYWxjdWxhdGUgdmVydHMgdG8gZHJhdyBpZiBub3QgZGVmaW5lZFxyXG5cdFx0aWYgKHZlcnRzVG9EcmF3ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0dmVydHNUb0RyYXcgPSB2ZXJ0cy5sZW5ndGggLyB2ZXJ0U2l6ZTtcclxuXHRcdH1cclxuXHRcdG8uZ2wuZHJhd0FycmF5cyh0eXBlLCAwLCB2ZXJ0c1RvRHJhdyk7XHJcblx0XHRyZXR1cm4gbztcclxuXHR9XHJcblx0LyoqIERyYXcgYWxsIHByb2dyYW1zIChpbiBvcmRlcikgKi9cclxuXHRkcmF3QWxsKG9wdCA9IHt9KSB7XHJcblx0XHR0aGlzLnAuZm9yRWFjaCgocCwgaSkgPT4gdGhpcy5kcmF3KE9iamVjdC5hc3NpZ24oeyBpLCBjbGVhcjogIWkgfSwgb3B0KSkpO1xyXG5cdH1cclxufVxyXG5cclxuY29uc3Qgd2ViZ2xwID0ge1xyXG5cdC8qKiBHbHAgY2xhc3MgKi9cclxuXHRHbHAsXHJcblx0LyoqIFNjcmVlbiBUcmlhbmdsZSBWZXJ0aWNlcyAqL1xyXG5cdFNUVixcclxuXHQvKiogU2NyZWVuIFRyaWFuZ2xlcyBOdW1iZXJzIHBlciB2ZXJ0ZXggKi9cclxuXHRTVE5QVixcclxuXHQvKiogR2V0IHRoZSByZW5kZXJpbmcgY29udGV4dCBmcm9tIGEgY2FudmFzIHZpYSB0aGUgRE9NIHNlbGVjdG9yICovXHJcblx0Z2V0UmVuZGVyaW5nQ29udGV4dDogKHNlbGVjdG9yLCBhbnRpYWxpYXMgPSBmYWxzZSkgPT4ge1xyXG5cdFx0Y29uc3QgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcblx0XHRjb25zdCBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIHsgYW50aWFsaWFzIH0pOyAvLyBHZXQgdGhlIFdlYkdMIHJlbmRlcmluZyBjb250ZXh0XHJcblx0XHRpZiAoIWdsKSB7XHJcblx0XHRcdGFsZXJ0KCdVbmFibGUgdG8gaW5pdGlhbGl6ZSBXZWJHTC4gWW91ciBicm93c2VyIG9yIG1hY2hpbmUgbWF5IG5vdCBzdXBwb3J0IGl0LicpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGdsO1xyXG5cdH0sXHJcblx0LyoqIExvYWQgdGV4dCBmcm9tIGEgVVJMIHVzaW5nIGZldGNoICovXHJcblx0bG9hZFRleHQ6ICh1cmwpID0+IHtcclxuXHRcdHJldHVybiBmZXRjaCh1cmwpLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKTtcclxuXHR9LFxyXG5cdC8qKiBMb2FkIG11bHRpcGxlIHNoYWRlcnMgKi9cclxuXHRsb2FkU2hhZGVyczogKHVybHMpID0+IHtcclxuXHRcdHJldHVybiBQcm9taXNlLmFsbCh1cmxzLm1hcCh1ID0+IHdlYmdscC5sb2FkVGV4dCh1KSkpO1xyXG5cdH0sXHJcblx0LyoqXHJcblx0ICogQ29tcGlsZSBhIHdlYkdMIHNoYWRlclxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBnbCAtIHdlYkdMIG9iamVjdFxyXG5cdCAqIEBwYXJhbSB7Kn0gdHlwZSAtIHR5cGUgb2Ygc2hhZGVyLCBlLmcuIGdsLlZFUlRFWF9TSEFERVJcclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3JjIC0gc291cmNlIHRleHQgZm9yIHNoYWRlclxyXG5cdCAqL1xyXG5cdGNvbXBpbGVTaGFkZXI6IChnbCwgdHlwZSwgc3JjKSA9PiB7XHJcblx0XHRjb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSk7XHJcblx0XHRnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzcmMpO1xyXG5cdFx0Z2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG5cdFx0cmV0dXJuIHNoYWRlcjtcclxuXHR9LFxyXG5cdC8qKiBNYWtlIHRoZSBHTCBjYW52YXMgbWF0Y2ggdGhlIHdpbmRvdydzIHdpZHRoIGFuZCBoZWlnaHQgKi9cclxuXHRmdWxsc2NyZWVuOiAoZ2wsIHdpbiA9IHdpbmRvdykgPT4ge1xyXG5cdFx0Z2wuY2FudmFzLndpZHRoID0gd2luLmlubmVyV2lkdGg7XHJcblx0XHRnbC5jYW52YXMuaGVpZ2h0ID0gd2luLmlubmVySGVpZ2h0O1xyXG5cdFx0d2ViZ2xwLnNldFZpZXdwb3J0KGdsKTtcclxuXHR9LFxyXG5cdC8qKiBTZXQgdGhlIEdMIHZpZXdwb3J0IHRvIG1hdGNoIHRoZSBjYW52YXMgd2lkdGggYW5kIGhlaWdodCAqL1xyXG5cdHNldFZpZXdwb3J0OiAoZ2wpID0+IHtcclxuXHRcdGdsLnZpZXdwb3J0KDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCk7XHJcblx0fSxcclxuXHQvKipcclxuXHQgKiBDb21waWxlIGEgd2ViR0wgcHJvZ3JhbVxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBnbCAtIHdlYkdMIG9iamVjdFxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nW119IHNoYWRlcnMgLSBhcnJheSBvZiBzaGFkZXIgcHJvZ3JhbSB0ZXh0XHJcblx0ICovXHJcblx0Y29tcGlsZTogKGdsLCBzaGFkZXJzKSA9PiB7IC8vIHNoYWRlcnMgPSBhcnJheSBvZiB0ZXh0XHJcblx0XHQvLyBDcmVhdGUgdGhlIFdlYkdMIHByb2dyYW1cclxuXHRcdGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XHJcblxyXG5cdFx0Y29uc3QgUyA9IFtnbC5WRVJURVhfU0hBREVSLCBnbC5GUkFHTUVOVF9TSEFERVJdO1xyXG5cdFx0Y29uc3QgTCA9IFsndmVydGV4JywgJ2ZyYWdtZW50J107XHJcblx0XHRzaGFkZXJzLm1hcCgodCwgaSkgPT4ge1xyXG5cdFx0XHRjb25zdCBzID0gd2ViZ2xwLmNvbXBpbGVTaGFkZXIoZ2wsIFNbaV0sIHQpO1xyXG5cdFx0XHRnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgcyk7XHJcblx0XHRcdGxvZyhMW2ldICsgJyBzaGFkZXI6JywgZ2wuZ2V0U2hhZGVySW5mb0xvZyhzKSB8fCAnT0snKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG5cdFx0Z2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcclxuXHRcclxuXHRcdGxvZygncHJvZ3JhbTonLCBnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKSB8fCAnT0snKTtcclxuXHJcblx0XHRyZXR1cm4gcHJvZ3JhbTtcclxuXHR9LFxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemUgLSBDcmVhdGUgY2FudmFzIHJlbmRlcmluZyBjb250ZXh0LCBsb2FkIHNoYWRlcnMsIGNvbXBpbGUsIGFuZCByZXR1cm4gYSBHbHAgb2JqZWN0XHJcblx0ICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBhIC0gQSBET00gc2VsZWN0b3Igc3RyaW5nIGZvciB0aGUgY2FudmFzLCBvciBhIHdlYkdMIG9iamVjdFxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nW119IHVybHNBcnIgLSBBcnJheSBvZiB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlciBVUkxzXHJcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zLCBlLmcuIGZ1bGxzY3JlZW5cclxuXHQgKi9cclxuXHRpbml0OiBhc3luYyAoYSwgdXJsc0FyciwgeyBmdWxsc2NyZWVuIH0gPSB7fSkgPT4ge1xyXG5cdFx0Y29uc3QgZ2wgPSAodHlwZW9mIGEgPT09ICdzdHJpbmcnKSA/IHdlYmdscC5nZXRSZW5kZXJpbmdDb250ZXh0KGEpIDogYTtcclxuXHRcdC8vIERvIGFsaWFzZXM/XHJcblx0XHQvLyBjb25zdCBhbGlhc2VzID0ge2F0dGFjaFNoYWRlcjogJ2FTJ307XHJcblx0XHQvLyBmb3IgKGNvbnN0IGsgaW4gYWxpYXNlcykge1xyXG5cdFx0Ly8gXHRnbFthbGlhc2VzW2tdXSA9IGdsW2tdO1xyXG5cdFx0Ly8gfVxyXG5cdFx0Y29uc3QgcHJvbWlzZXMgPSB1cmxzQXJyLm1hcCh1cmxzID0+IChcclxuXHRcdFx0d2ViZ2xwLmxvYWRTaGFkZXJzKHVybHMpLnRoZW4oKHMpID0+IHdlYmdscC5jb21waWxlKGdsLCBzKSlcclxuXHRcdCkpO1xyXG5cdFx0Y29uc3QgcHJvZ3JhbXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcblx0XHQvLyBjb25zdCBwcm9ncmFtID0gYXdhaXQgd2ViZ2xwLmxvYWRTaGFkZXJzKHVybHNBcnJbMF0pLnRoZW4oKHMpID0+IHdlYmdscC5jb21waWxlKGdsLCBzKSk7XHJcblx0XHQvLyBsb2cocHJvZ3JhbXMpO1xyXG5cdFx0aWYgKGZ1bGxzY3JlZW4pIHtcclxuXHRcdFx0d2ViZ2xwLmZ1bGxzY3JlZW4oZ2wpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5ldyBHbHAoZ2wsIHByb2dyYW1zKTtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB3ZWJnbHA7XHJcbiIsIi8vIGltcG9ydCBMb29wIGZyb20gJy4uL25vZGVfbW9kdWxlcy9yb2NrZXQtYm9vdHMtbG9vcC9zcmMvTG9vcC5qcyc7XHJcbmltcG9ydCBTaGlwIGZyb20gJy4vU2hpcC5qcyc7XHJcbmltcG9ydCBTcGFjZU9iamVjdCBmcm9tICcuL1NwYWNlT2JqZWN0LmpzJztcclxuaW1wb3J0IEFzdGVyb2lkIGZyb20gJy4vQXN0ZXJvaWQuanMnO1xyXG5cclxuLy8gaW1wb3J0IHdlYmdscCBmcm9tICcuLi9ub2RlX21vZHVsZXMvd2ViZ2xwL3dlYmdscC5qcyc7XHJcblxyXG5pbXBvcnQgd2ViZ2xwIGZyb20gJy4uLy4uLy4uL3JvY2tldC1ib290cy1yZXBvcy93ZWJnbHAvd2ViZ2xwLmpzJztcclxuXHJcbmNvbnN0IFNIQURFUlMgPSBbXHJcblx0WydzdGFycy12Lmdsc2wnLCAnc3RhcnMtZi5nbHNsJ10sXHJcblx0Wyd2Lmdsc2wnLCAnZi5nbHNsJ10sXHJcbl07XHJcbmNvbnN0IE5VTV9PRl9BU1RFUk9JRFMgPSA0MDQ7XHJcbmNvbnN0IFNVTl9NQVNTX01VTFRJUExJRVIgPSAxMDAwMDtcclxuY29uc3QgQVNURVJPSURfUkFESVVTID0gMTIwO1xyXG5jb25zdCBBU1RFUk9JRF9SQURJVVNfUkFOR0UgPSAzMDtcclxuXHJcbmNvbnN0IE1BWF9aT09NX0RFTFRBID0gNjAwO1xyXG5jb25zdCBNSU5fWk9PTSA9IDAuNDtcclxuY29uc3QgTUFYX1pPT00gPSA1MDAwO1xyXG5jb25zdCBaT09NX01VTFRJUExJRVIgPSAuMDAxO1xyXG5cclxubGV0IHpvb20gPSAxMi47XHJcbmxldCBnbHA7XHJcbmxldCBsYXN0QXN0ZXJvaWRDb3VudCA9IE5VTV9PRl9BU1RFUk9JRFM7XHJcbmxldCBsb29wO1xyXG5sZXQgaXNTdGFydGVkID0gZmFsc2U7XHJcblxyXG5jb25zdCBvYmplY3RzID0gW107XHJcbmNvbnN0IHN1biA9IHNldHVwU3VuKCk7XHJcbmNvbnN0IGFzdGVyb2lkcyA9IHNldHVwQXN0ZXJvaWRzKHN1bik7XHJcbmNvbnN0IHNoaXAgPSBzZXR1cFNoaXAoc3VuKVxyXG5cclxuY29uc3QgJCA9IChpZCkgPT4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xyXG5cclxuY29uc3QgZHJhdyA9ICgpID0+IHtcclxuXHRjb25zdCB1bmlmb3JtcyA9IFtcclxuXHRcdFsnaVJlc29sdXRpb24nLCBnbHAuZ2wuY2FudmFzLndpZHRoLCBnbHAuZ2wuY2FudmFzLmhlaWdodF0sXHJcblx0XHRbJ3pvb20nLCB6b29tXSxcclxuXHRcdFsndmlld2VyUG9zaXRpb24nLCBzaGlwLnBvcy54LCBzaGlwLnBvcy55LCAwLl0sXHJcblx0XHQvLyBbJ2NvbG9yJywgMS4sIDEuLCAwLiwgMS5dLFxyXG5cdF07XHJcblxyXG5cdC8vIERyYXcgc3RhcnMgYmFja2dyb3VuZFxyXG5cdGdscC51c2UoMCkuZHJhdyh7IHVuaWZvcm1zLCBidWZmczogW1sncG9zaXRpb24nXV0gfSk7XHJcblxyXG5cdC8vIERyYXcgZ2FsYXh5XHJcblx0Y29uc3QgYnVmZnMgPSBbXHJcblx0XHRbJ3Bvc2l0aW9uJywgeyBzaXplOiAzLCBzdHJpZGU6IDYgfV0sXHJcblx0XHRbJ2NvbG9yJywgeyBzaXplOiAzLCBzdHJpZGU6IDYsIG9mZnNldDogMyB9XSxcclxuXHRdO1xyXG5cdGdscC51c2UoMSkuZHJhdyh7XHJcblx0XHR1bmlmb3JtcyxcclxuXHRcdGJ1ZmZzLFxyXG5cdFx0dmVydHM6IG5ldyBGbG9hdDMyQXJyYXkoW10pLCBcclxuXHRcdHZlcnRTaXplOiA2LFxyXG5cdFx0dHlwZTogZ2xwLmdsLlRSSUFOR0xFX0ZBTixcclxuXHRcdGNsZWFyOiBmYWxzZSxcclxuXHRcdC8vIGJ1ZmZOYW1lOiAncG9zaXRpb24nLFxyXG5cdFx0Ly8gdmVydHM6IHZlcnRpY2VzLFxyXG5cdH0pO1xyXG5cclxuXHRvYmplY3RzLmZvckVhY2goKG8pID0+IHtcclxuXHRcdC8vIGdscC51bmlmKCd0cmFuc2xhdGlvbicsIDAsIDAsIDApOyAvLyBvLngsIG8ueSwgby56KTtcclxuXHRcdGdscC5kcmF3KHtcclxuXHRcdFx0Ly8gdW5pZm9ybXM6IFtdLFxyXG5cdFx0XHRidWZmcyxcclxuXHRcdFx0dmVydHM6IG8uZ2V0VmVydENvbG9ycygpLCAvLyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgdmVydHMgdG8gZHJhd1xyXG5cdFx0XHR2ZXJ0U2l6ZTogNixcclxuXHRcdFx0dHlwZTogZ2xwLmdsLlRSSUFOR0xFX0ZBTixcclxuXHRcdFx0Y2xlYXI6IGZhbHNlLFxyXG5cdFx0XHQvLyBidWZmTmFtZTogJ3Bvc2l0aW9uJyxcclxuXHRcdFx0Ly8gdmVydHM6IHZlcnRpY2VzLFxyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn07XHJcblxyXG5jb25zdCByZW1vdmVEZWxldGVkT2JqZWN0cyA9IChkZWxldGVJbmRpY2VzID0gW10pID0+IHtcclxuXHRmb3IobGV0IGQgPSBkZWxldGVJbmRpY2VzLmxlbmd0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XHJcblx0XHRjb25zdCBpID0gZGVsZXRlSW5kaWNlc1tkXTtcclxuXHRcdG9iamVjdHMuc3BsaWNlKGksIDEpO1xyXG5cdH1cclxufTtcclxuXHJcbmNvbnN0IG9iamVjdExvb3AgPSAodCkgPT4ge1xyXG5cdGxldCBhc3Rlcm9pZENvdW50ID0gMDtcclxuXHRjb25zdCBkZWxldGVJbmRpY2VzID0gW107XHJcblx0b2JqZWN0cy5mb3JFYWNoKChvLCBpKSA9PiB7XHJcblx0XHRpZiAoby5kZWxldGUpIHtcclxuXHRcdFx0ZGVsZXRlSW5kaWNlcy5wdXNoKGkpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZiAoby5vbmdvaW5nKSB7IG8ub25nb2luZyh0KTsgfVxyXG5cdFx0by5yb3RhdGUodCk7XHJcblx0XHRvLmNhbGNWZXJ0c1dpdGhSb3RhdGlvbigpO1xyXG5cdFx0Ly8gaWYgKG8uZ3Jhdml0YXRlKSB7IG8uZ3Jhdml0YXRlKHQsIG9iamVjdHMpOyB9XHJcblx0XHRpZiAoby5ncmF2aXRhdGUpIHsgby5ncmF2aXRhdGUodCwgW29iamVjdHNbMF1dKTsgfVxyXG5cdFx0by5tb3ZlKHQpO1xyXG5cdFx0by5jb2xsaWRlKG9iamVjdHMpO1xyXG5cdFx0by5jbGVhckhpdCgpO1xyXG5cdFx0by5jaGVja0hpdHMob2JqZWN0cyk7XHJcblx0XHRpZiAobyBpbnN0YW5jZW9mIEFzdGVyb2lkKSB7XHJcblx0XHRcdGFzdGVyb2lkQ291bnQrKztcclxuXHRcdH1cclxuXHR9KTtcclxuXHRyZW1vdmVEZWxldGVkT2JqZWN0cyhkZWxldGVJbmRpY2VzKTtcclxuXHRyZXR1cm4geyBhc3Rlcm9pZENvdW50IH07XHJcbn07XHJcblxyXG5mdW5jdGlvbiBtYWtlRGVjYXkobywgbiA9IDgpIHtcclxuXHRvLmRlY2F5VGltZSA9IG47XHJcblx0by5vbmdvaW5nID0gKHQpID0+IHtcclxuXHRcdG8uZGVjYXlUaW1lIC09IHQ7XHJcblx0XHRpZiAoby5kZWNheVRpbWUgPCAwKSB7IG8uZGVsZXRlID0gdHJ1ZTsgfVxyXG5cdH07XHJcbn1cclxuXHJcbmNvbnN0IG1ha2VCdWxsZXQgPSAoc2hpcCwgYnVsbGV0UG93ZXIpID0+IHtcclxuXHRjb25zdCBiYXNlVmVydHMgPSBbXHJcblx0XHRbMCwgLjIsIDBdLFxyXG5cdFx0Wy0uMSwgLS4xLCAwXSxcclxuXHRcdFswLCAtLjIsIDBdLFxyXG5cdFx0Wy4xLCAtLjEsIDBdLFxyXG5cdF07XHJcblx0Y29uc3QgYiA9IG5ldyBTcGFjZU9iamVjdChiYXNlVmVydHMpO1xyXG5cdGIucm90YXRpb24gPSBzaGlwLnJvdGF0aW9uO1xyXG5cdGNvbnN0IGZhY2luZyA9IHNoaXAuZ2V0RmFjaW5nVW5pdFZlY3RvcigpLm11bHRpcGx5KC0xKTtcclxuXHRiLnBvcy5zZXQoc2hpcC5wb3MpLmFkZChmYWNpbmcuZ2V0TXVsdGlwbHkoc2hpcC5zaGlwU2NhbGUpKTtcclxuXHRiLnZlbC5zZXQoc2hpcC52ZWwpLmFkZChmYWNpbmcuZ2V0TXVsdGlwbHkoYnVsbGV0UG93ZXIpKTtcclxuXHRiLm1hc3MgKj0gMC41O1xyXG5cdG1ha2VEZWNheShiLCA4KTtcclxuXHRiLmRhbWFnZSA9IChkbWcsIG9iakhpdCkgPT4ge1xyXG5cdFx0Ly8gY29uc29sZS5sb2coZG1nIC8gMTApO1xyXG5cdFx0Yi5kZWNheVRpbWUgKj0gMC41O1xyXG5cdFx0aWYgKG9iakhpdCAhPT0gc3VuKSB7XHJcblx0XHRcdG9iakhpdC5kZWxldGUgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0Yi5ncmF2aXRhdGUgPSBudWxsOyAvLyBEb24ndCBhcHBseSBncmF2aXR5IHRvIGJ1bGxldHNcclxuXHRvYmplY3RzLnB1c2goYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBzZXR1cFNoaXAoc3VuKSB7XHJcblx0Y29uc3Qgc2hpcCA9IG5ldyBTaGlwKCk7XHJcblx0c2hpcC5wb3Muc2V0KHsgeDogQVNURVJPSURfUkFESVVTLCB5OiAwIH0pO1xyXG5cdHNoaXAuYmFzZUNvbG9yID0gWzAuNiwgMS4sIC4zXTtcclxuXHRzaGlwLnNldE9yYml0YWxWZWxvY2l0eShzdW4pO1xyXG5cdC8vIGNvbnNvbGUubG9nKHNoaXApO1xyXG5cdG9iamVjdHMucHVzaChzaGlwKTtcclxuXHRyZXR1cm4gc2hpcDtcclxufVxyXG5cclxuZnVuY3Rpb24gcHV0SW5SYW5kb21PcmJpdChvLCBzdW4pIHtcclxuXHRjb25zdCByID0gQVNURVJPSURfUkFESVVTICsgTWF0aC5yYW5kb20oKSAqIEFTVEVST0lEX1JBRElVU19SQU5HRTtcclxuXHRjb25zdCB0aGV0YSA9IE1hdGguUEkgKiAyICogTWF0aC5yYW5kb20oKTtcclxuXHRvLnBvcy5zZXRCeVBvbGFyQ29vcmRzKHIsIHRoZXRhKTtcclxuXHRvLnNldE9yYml0YWxWZWxvY2l0eShzdW4pO1xyXG5cdG8ucm90VmVsID0gTWF0aC5yYW5kb20oKSAqIC4zIC0gTWF0aC5yYW5kb20oKSAqIC4zO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXR1cEFzdGVyb2lkcyhzdW4pIHtcclxuXHQvLyBjb25zdCBiYXNlVmVydHMgPSBbXHJcblx0Ly8gXHRbMCwgLjQsIDBdLFxyXG5cdC8vIFx0Wy0uMiwgLS4yLCAwXSxcclxuXHQvLyBcdFsuMiwgLS4yLCAwXSxcclxuXHQvLyBdO1xyXG5cdC8vIGxldCBvID0gbmV3IFNwYWNlT2JqZWN0KGJhc2VWZXJ0cyk7XHJcblx0Ly8gby5wb3Muc2V0KHsgeDogMCwgeTogMCB9KTtcclxuXHQvLyBvLnZlbC5zZXQoeyB4OiAwLCB5OiAwLjEgfSk7XHJcblx0Ly8gb2JqZWN0cy5wdXNoKG8pO1xyXG5cclxuXHQvLyBjb25zdCByYW5kVmVydCA9ICgpID0+IE1hdGgucm91bmQoKE1hdGgucmFuZG9tKCkgKiA0IC0gMikgKiAxMDAwKS8xMDAwO1xyXG5cclxuXHRmb3IobGV0IGkgPSAwOyBpIDwgTlVNX09GX0FTVEVST0lEUzsgaSsrKSB7XHJcblx0XHQvLyBjb25zdCBiYXNlVmVydHMgPSBbXTtcclxuXHRcdC8vIGZvcihsZXQgdiA9IDA7IHYgPCAzOyB2KyspIHtcclxuXHRcdC8vIFx0YmFzZVZlcnRzLnB1c2goW3JhbmRWZXJ0KCksIHJhbmRWZXJ0KCksIDBdKTtcclxuXHRcdC8vIH1cclxuXHRcdC8vIGNvbnN0IGJhc2VWZXJ0cyA9IFNwYWNlT2JqZWN0LmdldFJlZ3VsYXJQb2x5Z29uVmVydHMocmFuZG9tVmVydE51bSgpLCByYW5kb21SYWRpdXMoKSk7XHJcblx0XHRjb25zdCBvID0gbmV3IEFzdGVyb2lkKCk7XHJcblx0XHRwdXRJblJhbmRvbU9yYml0KG8sIHN1bik7XHJcblx0XHRvLmRhbWFnZSA9IChkbWcsIG9iakhpdCkgPT4ge1xyXG5cdFx0XHRpZiAob2JqSGl0ID09PSBzdW4pIHtcclxuXHRcdFx0XHRwdXRJblJhbmRvbU9yYml0KG8sIHN1bik7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRvYmplY3RzLnB1c2gobyk7XHJcblx0fVxyXG59O1xyXG5cclxuZnVuY3Rpb24gc2V0dXBTdW4oKSB7XHJcblx0Y29uc3QgYmFzZVZlcnRzID0gU3BhY2VPYmplY3QuZ2V0UmVndWxhclBvbHlnb25WZXJ0cyg0MCwgNDApO1xyXG5cdC8vIFtcclxuXHQvLyBcdFswLCA0MCwgMF0sXHJcblx0Ly8gXHRbMzAsIDMwLCAwXSxcclxuXHQvLyBcdFs0MCwgMCwgMF0sXHJcblx0Ly8gXHRbMzAsIC0zMCwgMF0sXHJcblx0Ly8gXHRbMCwgLTQwLCAwXSxcclxuXHQvLyBcdFstMzAsIC0zMCwgMF0sXHJcblx0Ly8gXHRbLTQwLCAwLCAwXSxcclxuXHQvLyBcdFstMzAsIDMwLCAwXSxcclxuXHQvLyBdO1xyXG5cdGNvbnN0IHN1biA9IG5ldyBTcGFjZU9iamVjdChiYXNlVmVydHMpO1xyXG5cdHN1bi5wb3Muc2V0KHsgeDogMCwgeTogMCB9KTtcclxuXHRzdW4ubW92ZSA9ICgpID0+IHt9OyAvLyBvdmVycmlkZSB0aGUgbW92ZSBmdW5jdGlvbiBzbyB0aGF0IHN1biBuZXZlciBtb3Zlc1xyXG5cdHN1bi5tYXNzICo9IFNVTl9NQVNTX01VTFRJUExJRVI7XHJcblx0b2JqZWN0cy5wdXNoKHN1bik7XHJcblx0cmV0dXJuIHN1bjtcclxufVxyXG5cclxuY29uc3Qgc2V0dXBMb29wID0gKHNoaXAsIGNvdW50RWx0KSA9PiB7XHJcblx0bGV0IHQgPSAwO1xyXG5cdGNvbnN0IGRyYXdEb20gPSAoYykgPT4ge1xyXG5cdFx0aWYgKGxhc3RBc3Rlcm9pZENvdW50ID09PSBjKSB7IHJldHVybjsgfVxyXG5cdFx0Y291bnRFbHQuaW5uZXJIVE1MID0gYztcclxuXHRcdGxhc3RBc3Rlcm9pZENvdW50ID0gYztcclxuXHRcdGlmIChjID09PSAwKSB7XHJcblx0XHRcdCQoJ3dpbicpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRsb29wID0gKCkgPT4ge1xyXG5cdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgobm93KSA9PiB7XHJcblx0XHRcdGNvbnN0IHsgYXN0ZXJvaWRDb3VudCB9ID0gb2JqZWN0TG9vcCgobm93IC0gdCkgLyAxMDAwKTtcclxuXHRcdFx0ZHJhd0RvbShhc3Rlcm9pZENvdW50KTtcclxuXHRcdFx0ZHJhdygpO1xyXG5cdFx0XHR0ID0gbm93O1xyXG5cdFx0XHRsb29wKCk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cdG9iamVjdExvb3AoMCk7XHJcblx0ZHJhdygpO1xyXG5cdC8vIG9iamVjdExvb3AoMC4xIC8gMTAwMCk7XHJcblx0Ly8gZHJhdygpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gc3RhcnRMb29wKCkge1xyXG5cdGlmIChpc1N0YXJ0ZWQpIHsgcmV0dXJuOyB9XHJcblx0aXNTdGFydGVkID0gdHJ1ZTtcclxuXHQkKCdtYWluJykuY2xhc3NMaXN0LmFkZCgnZ28nKTtcclxuXHRsb29wKCk7XHJcbn1cclxuXHJcbmNvbnN0IGdldE1vdXNlUG9zaXRpb24gPSAoZSkgPT4ge1xyXG5cdC8vIGZpeCBmb3IgQ2hyb21lXHJcblx0Y29uc3QgZUZpeGVkID0gKGUudHlwZS5zdGFydHNXaXRoKCd0b3VjaCcpKSA/IGUudGFyZ2V0VG91Y2hlc1swXSA6IGU7XHJcblx0cmV0dXJuIFtlRml4ZWQucGFnZVgsIGVGaXhlZC5wYWdlWV07XHJcbn1cclxuXHJcbmNvbnN0IHNldHVwSW5wdXQgPSAoY2FudmFzLCBzaGlwKSA9PiB7XHJcblx0Y29uc3QgY2FudmFzU2l6ZSA9IFtjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHRdO1xyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIChlKSA9PiB7XHJcblx0XHQvLyBjb250cm9sIHNwZWVkIGJhc2VkIG9uIGN1cnJlbnQgem9vbSwgdGhyb3R0bGUgdGhlIHNwZWVkXHJcblx0XHRjb25zdCB6b29tU3BlZWQgPSBNYXRoLm1pbihNQVhfWk9PTV9ERUxUQSwgTWF0aC5hYnMoZS5kZWx0YVkpKSAqIFpPT01fTVVMVElQTElFUiAqIHpvb207XHJcblx0XHRjb25zdCB6b29tRGlyID0gKGUuZGVsdGFZIDwgMCA/IC0xIDogMSk7XHJcblx0XHQvLyBjYXAgdGhlIHpvb21cclxuXHRcdHpvb20gPSBNYXRoLm1heChNSU5fWk9PTSwgTWF0aC5taW4oTUFYX1pPT00sIHpvb20gKyB6b29tRGlyICogem9vbVNwZWVkKSk7XHJcblx0XHQvLyBjb25zb2xlLmxvZyh6b29tKTtcclxuXHRcdGlmICghaXNTdGFydGVkKSB7IGRyYXcoKTsgfVxyXG5cdH0pO1xyXG5cdHdpbmRvdy5vbmNvbnRleHRtZW51ID0gKGUpID0+IGUucHJldmVudERlZmF1bHQoKTtcclxuXHRjYW52YXMub25tb3VzZWRvd24gPSBjYW52YXMub250b3VjaHN0YXJ0ID0gKGUpID0+IHtcclxuXHRcdGlmIChlLndoaWNoID09PSAzKSB7IHNoaXAuZW5nYWdlKCk7IH1cclxuXHR9O1xyXG5cdGNhbnZhcy5vbm1vdXNldXAgPSBjYW52YXMub250b3VjaGVuZCA9IChlKSA9PiB7XHJcblx0XHRzdGFydExvb3AoKTtcclxuXHRcdGlmIChlLndoaWNoID09PSAzKSB7XHJcblx0XHRcdHNoaXAuZGlzZW5nYWdlKCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGJ1bGxldFBvd2VyID0gc2hpcC5maXJlKCk7XHJcblx0XHRtYWtlQnVsbGV0KHNoaXAsIGJ1bGxldFBvd2VyKTtcclxuXHR9O1xyXG5cdGNhbnZhcy5vbm1vdXNlbW92ZSA9IGNhbnZhcy5vbnRvdWNobW92ZSA9IChlKSA9PiB7XHJcblx0XHRjb25zdCBmaXhlZEN1cnJlbnRNb3VzZVBvcyA9IGdldE1vdXNlUG9zaXRpb24oZSkubWFwKChuLCBpKSA9PiAoXHJcblx0XHRcdChuIC0gKGNhbnZhc1NpemVbaV0gLyAyKSkgKiAoaSA9PT0gMSA/IC0xIDogMSlcclxuXHRcdCkpO1xyXG5cdFx0Y29uc3QgdGhldGEgPSBNYXRoLmF0YW4yKGZpeGVkQ3VycmVudE1vdXNlUG9zWzFdLCBmaXhlZEN1cnJlbnRNb3VzZVBvc1swXSk7XHJcblx0XHRzaGlwLnJvdGF0aW9uID0gdGhldGEgLSBNYXRoLlBJLzI7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhmaXhlZEN1cnJlbnRNb3VzZVBvcywgdGhldGEsIHRoZXRhICogKE1hdGguUEkgKiAyKSk7XHJcblx0fTtcclxufTtcclxuXHJcbi8vIENyZWF0ZSBnbHBcclxuY29uc3QgaW5pdCA9IGFzeW5jICgpID0+IHtcclxuXHRnbHAgPSBhd2FpdCB3ZWJnbHAuaW5pdCgnI2NhbnZhcycsIFNIQURFUlMsIHsgZnVsbHNjcmVlbjogdHJ1ZSB9KTtcclxuXHR3aW5kb3cuei5nbHAgPSBnbHA7XHJcblx0Y29uc29sZS5sb2coZ2xwKTtcclxuXHRzZXR1cElucHV0KGdscC5nbC5jYW52YXMsIHNoaXAsIHN1bik7XHJcblx0c2V0dXBMb29wKHNoaXAsICQoJ2NvdW50JykpO1xyXG5cdHJldHVybiBnbHA7XHJcbn1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0KTtcclxuXHJcbndpbmRvdy56ID0geyBTcGFjZU9iamVjdCwgZ2xwLCBvYmplY3RzIH07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=